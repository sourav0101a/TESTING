import { api, LightningElement } from 'lwc';
import { getRecordNotifyChange } from 'lightning/uiRecordApi';
import newCase from '@salesforce/apex/SC_CommonLEX.newCase';
import LightningAlert from 'lightning/alert';
import { NavigationMixin } from 'lightning/navigation';

export default class Scnewcase extends NavigationMixin(LightningElement) {
    @api resType;
    @api resMsg;

    @api
    newCaseContact(contactId) {
        console.log('value of contactId: ' + contactId);
        getRecordNotifyChange([{ recordId: contactId }]);
        console.log('calling apex class');
        
        newCase({ conId: contactId })
            .then(result => {
                let conts = result;
                let indexVal = conts.indexOf(",");
                console.log('value of conts: ' + conts);
                console.log('value of indexVal: ' + indexVal);

                this.resType = conts.slice(0, indexVal);
                this.resMsg = conts.slice(indexVal + 1);

                console.log('value of resType: ' + this.resType);
                console.log('value of resMsg: ' + this.resMsg);

                // Ensure resMsg has a value before navigating
                if (this.resType === 'URL') {
                    console.log('Entering URL condition');
                    this.navigateToRecordPage(this.resMsg);
                }

                if (this.resType === "alert") {
                    LightningAlert.open({
                        message: this.resMsg,
                        theme: 'error',
                        label: 'Error!',
                    }).then(() => {
                        console.log('Inside alert event');
                        const closeCaseModal = new CustomEvent('alerteventcase', {
                            detail: {
                                name: 'closeCaseModal'
                            }
                        });
                        this.dispatchEvent(closeCaseModal);
                        console.log('event dispatched for alertevent');
                    });
                } else if (this.resType === 'URL') {
                    console.log('Entered else for URL');
                    const caseEvent = new CustomEvent('createcaseevents', {
                        detail: {
                            urlToOpen: this.resMsg,
                            name: 'OpenPage'
                        }
                    });
                    console.log('value of caseEvent: ' + caseEvent);
                    this.dispatchEvent(caseEvent);
                    console.log('Event dispatched');
                } else {
                    console.log('Error during case creation');
                }
            })
            .catch(error => {
                console.log('Error: ' + error);
            });
    }

    navigateToRecordPage(caseId) {
        console.log('Navigating to record page with caseId: ' + caseId);
        this[NavigationMixin.Navigate]({
            type: 'standard__recordPage',
            attributes: {
                recordId: caseId, // Ensure this is the case ID
                objectApiName: 'Case',
                actionName: 'view'
            }
        });
    }
}
