    static testmethod void genericAfterInsert(){
        //Added for fixing Account Master error- start
        Integration_Setting__c integrationSetting = new Integration_Setting__c();
        integrationSetting.name = 'AccountConnect';
        integrationSetting.API_Key__c = 'x-api-key';
        integrationSetting.Endpoint_Server__c = 'https://dev.rasi.refinitiv.com';
        integrationSetting.Endpoint_URI__c = 'api/v1/accounts/account-request';
        integrationSetting.HTTP_Headers__c = 'Content-Type=>application/json';
        integrationSetting.HTTP_Method__c = 'POST';
        integrationSetting.Timeout__c = 120000;
        integrationSetting.Enable_Logging__c = true;
        
        insert integrationSetting;
        
        system.assert(integrationSetting.Id != null);
        List<Opportunity> oppList = new List<Opportunity>();
        
        List<Static_Values__c> sList =new List<Static_Values__c>();
        Static_Values__c s1 = new Static_Values__c();
        s1.Name='Account.Prospect';
        s1.Value__c='012300000000erOAAQ';
        Static_Values__c s2 = new Static_Values__c();
        s2.Name='Account.Customer';
        s2.Value__c='012400000004xe3AAA';
        sList.add(s1);
        sList.add(s2);
        upsert sList;
        //
        
        List<Opportunity> parentOpptyList = new List<Opportunity>{
            new Opportunity(Name = 'Test Opportunity 1', StageName = 'Prospecting', CloseDate = Date.today()),
            new Opportunity(Name = 'Test Opportunity 2', StageName = 'Needs Analysis', CloseDate = Date.today())
        };
        insert parentOpptyList;
        
        // Fetching CampaignInfluence data using utility method
        List<CampaignInfluence> campInfluenceList = OpportunityTriggerUtility.getCampInfluenceList(new List<String>{parentOpptyList[0].Id});
        
        // Create test CampaignInfluence records using the fetched CampaignId and ModelId
        List<CampaignInfluence> campaignInfluenceList = new List<CampaignInfluence>();
        for(CampaignInfluence influence : campInfluenceList){
            if(influence.Campaign.Unica_ID__c == '123'){
                campaignInfluenceList.add(new CampaignInfluence(OpportunityId = parentOpptyList[0].Id, CampaignId = influence.CampaignId, ModelId = influence.ModelId, Campaign = influence.Campaign));
            }
        }
        
        // Adding additional CampaignInfluence record with hardcoded values for demonstration
        //campaignInfluenceList.add(new CampaignInfluence(OpportunityId = parentOpptyList[1].Id, CampaignId = influence.CampaignId, ModelId = influence.ModelId, Campaign = new Campaign(Unica_ID__c = '456')));
        
       // Create test clonedOppMap
        Map<id,id> clonedOppMap = new Map<id,id>();
        Map<Id,String> genesisOppMap = new Map<Id,String>();
        for(Opportunity opp : parentOpptyList) {
            clonedOppMap.put(opp.Id, opp.Id);
            genesisOppMap.put(opp.Id, opp.Associated_Id__c);
        }
             
        
        // OpportunityTriggerGenericHelper.opptyCampaignAssociation(clonedOppMap, genesisOppMap);
        
        //Test.startTest();
        
        //Test.stopTest();

               
        //start test
       
        
        Test.startTest();
                
                
        
        PriceBook2 PricebookGenesis = optimisationTestUtility.getPricebook('Genesis Pricebook',false);
		Account ac = new Account(Name = 'Acc230@',ShippingStreet='test',ShippingCity='test',ShippingState='T1',ShippingPostalCode='123',ShippingCountry='United States',tfcmCustomerStatus__c='Prospect');
        insert ac;
		
        Account oppAccount12 = [SELECT id,name FROM Account WHERE Name = 'Acc230@' limit 1];
       
        // '0017j00000iHXi4AAG'
		Opportunity opprecord = new Opportunity(Name = 'testingOpp',AccountId=oppAccount12.Id,tfcrmType__c='account',CloseDate=System.Today()+5,StageName='1. Appointment Scheduled',REDI_Flag__c='True',Pricebook2id=PricebookGenesis.id);
        insert opprecord;
		
        //Account oppAccount12 = [SELECT id,name FROM Account WHERE Name = 'Acc23@'];
       
        // '0017j00000iHXi4AAG'
        //Opportunity opprecord = optimisationTestUtility.getOpportunityDetails('testingOpp',oppAccount12.id,'account',PricebookGenesis.id);
        //opprecord.name = 'testingOpp';
        //opprecord.stagename='Prospecting';
        //opprecord.CloseDate = Date.ValueOf('2020-08-08');
        //opprecord.Shipping_Country__c='India';
        //insert opprecord;
        opportunity opp = [select id,name from opportunity where name='testingOpp' limit 1];
        //Account ac = new Account();
        //ac.name='Acc23@';
        //ac.ShippingCountry ='India';
        //insert ac;
        account acc = [select id,name from account where name ='Acc230@'  limit 1];
        opp.tocPurchaseOrderNumber__c = '89076';
        opp.Redi_Flag__c = 'True';
        
        
        Static_Values__c statval=new Static_Values__c();
        statval.Name='CTI_Scheduler_IsRunning';
        statval.Value__c='false';
        insert statval;
		
		Profile p = [SELECT Id FROM Profile WHERE Name='System Administrator'];
        String orgId = UserInfo.getOrganizationId();
        String dateString = String.valueof(Datetime.now()).replace(' ','').replace(':','').replace('-','');
        Integer randomInt = Integer.valueOf(math.rint(math.random()*1000000));
        String uniqueName = orgId + dateString + randomInt;

        User u = new User(Alias = 'TestUser', Email= uniqueName + '@thomsonreuters.com',EmailEncodingKey='UTF-8',LastName='Testing',LanguageLocaleKey='en_US',
                 LocaleSidKey='en_US', FINRA_Registered__c = true,ProfileId = p.Id,tfcrmTeamRole__c = 'Relationship Manager',TimeZoneSidKey='America/Los_Angeles', UserName = uniqueName + '@REDItest559' + orgId + '.com');       
        insert u;
        
        system.runAs(u){        
        update opp;
		}
        GenesisTrialConvertController.isconverted=false;
        opportunity opp1 = optimisationTestUtility.getOpportunityDetails('clonedopp', acc.Id,'account',null);
        opp1.tocClonedFrom__c = opp.Id;
        //opp1.StageName = Label.Opportunity_Stage_4;
		opp2.StageName = '2.test';
        opp1.Suppress_Approvals__c=true;
        opp1.Suppress_Approval_Justification__c='test';
        opp1.Commit_to_Forecast__c=true;
        opp1.Redi_Flag__c = 'True';
        oppList.add(opp1);
        
        opportunity opp2 = optimisationTestUtility.getOpportunityDetails('trailopp1', acc.Id,'account',null);
        opp2.tocClonedFrom__c = null;
        opp2.StageName = '2.test';
        opp2.Trial_Opportunity__c = true;
        opp2.Associated_Id__c = opp.Id;
        opp2.Redi_Flag__c = 'true';
        opp.Partner_Account__c = acc.id;
        opp.Access_Statement__c = true;
        opp.Redi_Flag__c = 'True';
        // opp2.Suppress_Approvals__c=true;
        //opp2.Suppress_Approval_Justification__c='test';
        opplist.add(opp2);
        
        insert oppList;        
        //opp1.Commit_to_Forecast__c=false; // ADDED FOR GTT-1454
        //opp.Access_Statement__c = false;
        update opp1;
        
        delete opp1; // added 23062020
        //OpportunityTriggerGenericHelper.opptyCampaignAssociation(clonedOppMap, genesisOppMap);
        OpportunityTriggerGenericHelper.opptyCampaignAssociation(clonedOppMap, genesisOppMap);
        //stop test
        Test.stopTest();
    }
Test failure, method: OpportunityTriggerGenericHelperTest.genericAfterInsert -- System.DmlException: Update failed. First exception on row 0 with id 0067600000A9HPhAAN; first error: FIELD_CUSTOM_VALIDATION_EXCEPTION, FINRA Registered User required on REDI opportunity.Please add FINRA Registered User to the opportunity sales team before moving the Sales Stage to 3 and above.: [] stack Class.OpportunityTriggerGenericHelperTest.genericAfterInsert: line 953, column 1


static testmethod void genericAfterInsert(){
    // Create a FINRA Registered User
    Profile p = [SELECT Id FROM Profile WHERE Name='System Administrator'];
    String orgId = UserInfo.getOrganizationId();
    String dateString = String.valueof(Datetime.now()).replace(' ','').replace(':','').replace('-','');
    Integer randomInt = Integer.valueOf(math.rint(math.random()*1000000));
    String uniqueName = orgId + dateString + randomInt;

    User finraUser = new User(
        Alias = 'FINRAUser',
        Email = uniqueName + '@thomsonreuters.com',
        EmailEncodingKey = 'UTF-8',
        LastName = 'FINRA',
        LanguageLocaleKey = 'en_US',
        LocaleSidKey = 'en_US',
        FINRA_Registered__c = true, // This field indicates the user is FINRA Registered
        ProfileId = p.Id,
        tfcrmTeamRole__c = 'Relationship Manager',
        TimeZoneSidKey = 'America/Los_Angeles',
        UserName = uniqueName + '@REDItest559' + orgId + '.com'
    );
    insert finraUser;

    // Create an Account
    Account ac = new Account(
        Name = 'Acc230@',
        ShippingStreet = 'test',
        ShippingCity = 'test',
        ShippingState = 'T1',
        ShippingPostalCode = '123',
        ShippingCountry = 'United States',
        tfcmCustomerStatus__c = 'Prospect'
    );
    insert ac;

    // Create an Opportunity and link it to the Account
    Opportunity opprecord = new Opportunity(
        Name = 'testingOpp',
        AccountId = ac.Id,
        tfcrmType__c = 'account',
        CloseDate = System.Today() + 5,
        StageName = '1. Appointment Scheduled',
        REDI_Flag__c = 'True',
        // Ensure the Pricebook2Id is set appropriately
        // Pricebook2Id = PricebookGenesis.id  // Make sure this is correctly initialized in your code
    );
    insert opprecord;

    // Add the FINRA Registered User to the Opportunity's Sales Team
    OpportunityTeamMember teamMember = new OpportunityTeamMember(
        OpportunityId = opprecord.Id,
        UserId = finraUser.Id,
        TeamMemberRole = 'Sales Representative'  // Adjust the role as needed
    );
    insert teamMember;

    // Update the Opportunity's fields
    opprecord.tocPurchaseOrderNumber__c = '89076';
    opprecord.Redi_Flag__c = 'True';

    // Perform the update within the context of the FINRA Registered User
    System.runAs(finraUser){
        update opprecord;
    }

    // Add assertions or further test logic as needed

    // Stop test execution
    Test.stopTest();
}
