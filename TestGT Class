@isTest
private class TestServiceBatchERTUpdate {
    @isTest
    static void testBatchExecution() {
        // Create test data
        List<Case> testCases = new List<Case>();
        for(Integer i = 0; i < 10; i++) {
            Case newCase = new Case(
                Likely_Restoration_Time__c = System.now().addHours(6), // A time less than 12 hours from now
                Case_Owner_Role_Static__c = 'CONT_ST_RPS', // Matching your batch criteria
                Status = 'Open', // Not closed
                Cause__c = 'Production - Not Part of LSEG Offering', // One of the specified causes
                Diagnosis_Summary__c = 'Content Not Available', // One of the specified diagnoses
                Number_of_Instruments_Queried__c = 1 // At least one instrument queried
            );
            testCases.add(newCase);
        }
        insert testCases;
        
        Test.startTest();
        // Execute the batch job
        ServiceBatchERTUpdate batchJob = new ServiceBatchERTUpdate();
        Database.executeBatch(batchJob);
        Test.stopTest();
        
        // Verify that the cases have been updated
        List<Case> updatedCases = [SELECT Id, Likely_Restoration_Time__c, Status FROM Case WHERE Id IN :testCases];
        System.assertEquals(10, updatedCases.size(), 'All test cases should have been updated');
        for (Case c : updatedCases) {
            System.assertNotEquals(System.now().addHours(6), c.Likely_Restoration_Time__c, 'Likely Restoration Time should have been updated');
            System.assertEquals('Service Restored', c.Status, 'Status should have been updated');
        }
    }
}
