@isTest
private class CreateOppTeamMembersTest {

    // Test method to cover positive scenario
    @isTest
    static void testCreateOppTeamMembers() {
        // Create test data
        Opportunity opp = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today());
        insert opp;

        User testUser = new User(FirstName = 'Test', LastName = 'User', Alias = 'tuser', Email = 'testuser@example.com',
                                  Username = 'testuser@example.com', CommunityNickname = 'tuser123', TimeZoneSidKey = 'America/Los_Angeles',
                                  LocaleSidKey = 'en_US', EmailEncodingKey = 'UTF-8', LanguageLocaleKey = 'en_US', ProfileId = UserInfo.getProfileId());
        insert testUser;

        // Create Opportunity Team Member records
        OpportunityTeamMember oppTeamMember = new OpportunityTeamMember(OpportunityId = opp.Id, UserId = testUser.Id, TeamMemberRole = 'Sales Rep');
        insert oppTeamMember;

        // Map to store associated opportunity IDs
        Map<String, String> oppAssociatedOppMap = new Map<String, String>();
        oppAssociatedOppMap.put(opp.Id, opp.Id);

        // Set to store opportunity IDs
        Set<Id> oppAssociatedIdSet = new Set<Id>();
        oppAssociatedIdSet.add(opp.Id);

        // Call the method under test
        Test.startTest();
        CreateOppTeamMembers.CreateOppTeamMembers(oppAssociatedIdSet, oppAssociatedOppMap);
        Test.stopTest();

        // Verify the results
        System.assertEquals(1, [SELECT count() FROM OpportunityTeamMember WHERE OpportunityId = :opp.Id]);
    }

    // Test method to cover scenario when there are no team members to create
    @isTest
    static void testCreateOppTeamMembers_NoTeamMembers() {
        // Create test data
        Opportunity opp = new Opportunity(Name = 'Test Opportunity', StageName = 'Prospecting', CloseDate = Date.today());
        insert opp;

        // Map to store associated opportunity IDs
        Map<String, String> oppAssociatedOppMap = new Map<String, String>();
        oppAssociatedOppMap.put(opp.Id, opp.Id);

        // Set to store opportunity IDs
        Set<Id> oppAssociatedIdSet = new Set<Id>();
        oppAssociatedIdSet.add(opp.Id);

        // Call the method under test
        Test.startTest();
        CreateOppTeamMembers.CreateOppTeamMembers(oppAssociatedIdSet, oppAssociatedOppMap);
        Test.stopTest();

        // Verify the results
        System.assertEquals(0, [SELECT count() FROM OpportunityTeamMember WHERE OpportunityId = :opp.Id]);
    }
}
