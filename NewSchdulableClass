global class SalesSchdulableERTUpdate implements Schedulable {

    global void execute(SchedulableContext sc) {
        updateCaseEstimate();
    }

    public static void updateCaseEstimate(){
        // List to store cases that need to be updated
        List<Case> casesToUpdate = new List<Case>();
        DateTime currentDateTime = DateTime.now().addHours(12);
        System.debug('DateTime.now().addHours(12) ' + currentDateTime);
        
        // Query cases where estimate_resolution_time__c is less than 12 hours remaining
        for (Case c : [SELECT Id, Likely_Restoration_Time__c, Cause__c, Diagnosis_Summary__c, Number_of_Instruments_Queried__c, Case_Owner_Name__c
                        FROM Case 
                        WHERE Likely_Restoration_Time__c < :currentDateTime AND Case_Owner_Role_Static__c ='CONT_ST_RPS' 
                        AND
                        Status NOT IN ('Closed','Cancelled','Unresolved','Service Restored')]) {

            // Update estimate_resolution_time__c by adding 7 days
            c.Likely_Restoration_Time__c = c.Likely_Restoration_Time__c.addDays(7);
            System.debug('Likely_Restoration_Time__c Value ' + c.Likely_Restoration_Time__c);
            casesToUpdate.add(c);
        }
        // Update the estimate_resolution_time__c field for all cases meeting the criteria
        if (!casesToUpdate.isEmpty()) {
            update casesToUpdate;
        }
        
        List<Case> casesToUpdateFields = new List<Case>();
        // Loop through cases again to update fields based on condition
        for (Case c : casesToUpdate) {
            System.debug('Inside if else condition ' + c);
            Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
            email.setTemplateId('00X8D000003Kel9UAC');
            email.setTargetObjectId(c.Id);
            email.setWhatId(c.Id);
            email.setSaveAsActivity(false); // Check with True Also
            
            email.setHtmlBody('<p>Case Owner Name:' + c.Case_Owner_Name__c);
            // Check cause and diagnosis fields
            if(c.Cause__c =='Production - Not Part of LSEG Offering' && c.Diagnosis_Summary__c =='Content Not Available' &&
               c.Number_of_Instruments_Queried__c > 0){
                c.Status = 'Service Restored';
                c.Market_Sector__c = 'TR Pricing Services';
                c.Market_sector_Sub_Type_1__c = 'FixedIncome';
                c.Resolution_Code__c = 'New Data Added by LSEG to Existing Market';
                c.Data_Field__c = 'Pricing Services';
                c.Data_Source_Name__c = 'EJV';
                c.Data_Source_Country__c = 'Global';
                System.debug('Inside if NEW PROD' + c);
                   
            } else if (c.Cause__c =='Source - Lack of Information/Source' && c.Diagnosis_Summary__c =='Content Not Available' &&
                        c.Number_of_Instruments_Queried__c > 0){
                c.Status = 'Service Restored';
                c.Market_Sector__c = 'TR Pricing Services';
                c.Market_sector_Sub_Type_1__c = 'FixedIncome';
                c.Resolution_Code__c = 'Data Not Added by LSEG';
                c.Data_Field__c = 'Pricing Services';
                c.Data_Source_Name__c = 'EJV';
                c.Data_Source_Country__c = 'Global';
                System.debug('Inside if else NEW SOURCE' + c);
                            
            } else if (c.Cause__c =='Content Explanation' && c.Diagnosis_Summary__c =='Content Explanation' && 
                       c.Number_of_Instruments_Queried__c > 0){
                c.Status = 'Service Restored';
                c.Market_Sector__c = 'TR Pricing Services';
                c.Market_sector_Sub_Type_1__c = 'FixedIncome';
                c.Resolution_Code__c = 'Data confirmed as correct';
                c.Data_Field__c = 'Pricing Services';
                c.Data_Source_Name__c = 'EJV';
                c.Data_Source_Country__c = 'Global';
                c.Content_Type__c = 'Price Challenge/variance';
                c.Resolution_Comment__c = email.getHtmlBody();          
                System.debug('Inside if else NEW' + c);
                System.debug('Inside if else NEW 0.1' + c.Resolution_Comment__c);
            }
            casesToUpdateFields.add(c);
        }
        if (!casesToUpdateFields.isEmpty()) {
            update casesToUpdateFields;
        }
    }
}
