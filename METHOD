   public static List<OpportunityTeamMember> getTeamMembers(Set<Id> oppIdSet){
        List<OpportunityTeamMember> oppTeamMember = new List<OpportunityTeamMember>();
        
        oppTeamMember = [SELECT id,Opportunityid,TeamMemberRole,OpportunityAccessLevel,Userid 
                         FROM OpportunityTeamMember 
                         WHERE Opportunityid IN: oppIdSet];
        
        return oppTeamMember;

Test failure, method: OpportunityTriggerGenericHelperTest.performLegalEntityTest -- System.DmlException: Insert failed. First exception on row 0; first error: FIELD_INTEGRITY_EXCEPTION, field integrity exception: PricebookEntryId (pricebook entry currency code does not match opportunity currency code): [PricebookEntryId] stack Class.OpportunityTriggerGenericHelperTest.testData: line 462, column 1








@isTest
private class OppQuoteLineItemsSyncTest {
    @isTest
    static void testOppQuoteLineItemsSync() {
        // Create test data
        Opportunity opp = new Opportunity(Name = 'Test Opp', StageName = 'Prospecting', CloseDate = Date.today());
        insert opp;

        Pricebook2 standardPricebook = [SELECT Id FROM Pricebook2 WHERE IsStandard = true LIMIT 1];

        PricebookEntry pbe = new PricebookEntry(
            Pricebook2Id = standardPricebook.Id,
            Product2Id = Test.getStandardPricebookEntry().Product2Id,
            UnitPrice = 100.00,
            IsActive = true
        );
        insert pbe;

        Quote quote = new Quote(
            Name = 'Test Quote',
            OpportunityId = opp.Id,
            Pricebook2Id = standardPricebook.Id,
            Status = 'Draft'
        );
        insert quote;

        QuoteLineItem qli = new QuoteLineItem(
            QuoteId = quote.Id,
            PricebookEntryId = pbe.Id,
            UnitPrice = 100.00,
            Quantity = 1,
            Discount = 0,
            SortOrder = 1
        );
        insert qli;

        OpportunityLineItem oli = new OpportunityLineItem(
            OpportunityId = opp.Id,
            PricebookEntryId = pbe.Id,
            UnitPrice = 100.00,
            Quantity = 1,
            Discount = 0,
            SortOrder = 1
        );
        insert oli;

        Map<Id, Id> syncQuoteMap = new Map<Id, Id>();
        syncQuoteMap.put(quote.Id, opp.Id);

        // Call the method to be tested
        Test.startTest();
        OppQuoteLineItemsSync(syncQuoteMap);
        Test.stopTest();

        // Retrieve the updated Opportunity Line Item
        OpportunityLineItem updatedOli = [SELECT Id FROM OpportunityLineItem WHERE Id = :oli.Id];

        // Assert that the Opportunity Line Item was updated as expected
        System.assertEquals(qli.PricebookEntryId, updatedOli.PricebookEntryId);
        System.assertEquals(qli.UnitPrice, updatedOli.UnitPrice);
        System.assertEquals(qli.Quantity, updatedOli.Quantity);
        System.assertEquals(qli.Discount, updatedOli.Discount);
        System.assertEquals(qli.SortOrder, updatedOli.SortOrder);
    }
}
