<template>
    <lightning-button label="New Case" onclick={openModal}></lightning-button>

    <template if:true={isModalOpen}>
        <section role="dialog" tabindex="-1" class="slds-modal slds-fade-in-open">
            <div class="slds-modal__container">
                <header class="slds-modal__header">
                    <button class="slds-button slds-modal__close slds-button_icon slds-button_icon-inverse" title="Close" onclick={handleClose}>
                        <lightning-icon icon-name="utility:close" alternative-text="close" size="small"></lightning-icon>
                        <span class="slds-assistive-text">Close</span>
                    </button>
                    <h2 class="slds-text-heading_medium">Select Record Type</h2>
                </header>
                <div class="slds-modal__body slds-p-around_medium">
                    <template if:true={recordTypeOptions}>
                        <lightning-radio-group
                            name="recordType"
                            label="Select a Record Type"
                            value={selectedRecordType}
                            options={recordTypeOptions}
                            onchange={handleRecordTypeChange}>
                        </lightning-radio-group>
                    </template>
                    <template if:false={recordTypeOptions}>
                        <p>No record types available.</p>
                    </template>
                </div>
                <footer class="slds-modal__footer">
                    <lightning-button variant="neutral" label="Cancel" onclick={handleClose}></lightning-button>
                    <lightning-button variant="brand" label="Create Case" onclick={handleCreateCase}></lightning-button>
                </footer>
            </div>
        </section>
        <div class="slds-backdrop slds-backdrop_open"></div>
    </template>
</template>





import { LightningElement, track } from 'lwc';
import getRecordTypeOptions from '@salesforce/apex/RecordTypeController.getRecordTypeOptions';

export default class ConfirmationWithRecordType extends LightningElement {
    @track isModalOpen = false;
    @track recordTypeOptions = [];
    @track selectedRecordType;

    connectedCallback() {
        this.loadRecordTypes();
    }

    loadRecordTypes() {
        getRecordTypeOptions()
            .then(result => {
                this.recordTypeOptions = result.map(rt => ({
                    label: rt.Name,
                    value: rt.Id
                }));
            })
            .catch(error => {
                console.error('Error loading record types:', error);
            });
    }

    handleButtonClick() {
        this.isModalOpen = true;
    }

    handleClose() {
        this.isModalOpen = false;
    }

    handleRecordTypeChange(event) {
        this.selectedRecordType = event.detail.value;
    }

    handleConfirm() {
        if (this.selectedRecordType) {
            const caseCreationUrl = `/lightning/o/Case/new?recordTypeId=${this.selectedRecordType}`;
            window.location.href = caseCreationUrl;
        } else {
            // Handle the case where no record type is selected
            alert('Please select a record type before continuing.');
        }
        this.isModalOpen = false;
    }
}




<?xml version="1.0" encoding="UTF-8"?>
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>56.0</apiVersion>
    <isExposed>true</isExposed>
    <targets>
        <target>lightning__RecordPage</target>
        <target>lightning__AppPage</target>
        <target>lightning__HomePage</target>
        <target>lightning__FlowScreen</target>
    </targets>
</LightningComponentBundle>



public with sharing class RecordTypeController {
    @AuraEnabled(cacheable=true)
    public static List<RecordType> getRecordTypeOptions() {
        return [SELECT Id, Name FROM RecordType WHERE SObjectType = 'Case'];
    }
}
