/***********************************************************************Customer Document Number    *********
* This test class covers the below classes:
* 1. OpportunityTriggerGenericHelper 
* 2. OpportunityTriggerGenesisHelper
*********************************************************************************/
@isTest(seeAllData= FALSE)
public class OpportunityTriggerGenericHelperTest {
    @testsetup 
    static void testData(){
        Integration_Setting__c integrationSetting = new Integration_Setting__c();
        integrationSetting.name = 'AccountConnect';
        integrationSetting.API_Key__c = 'x-api-key';
        integrationSetting.Endpoint_Server__c = 'https://dev.rasi.refinitiv.com';
        integrationSetting.Endpoint_URI__c = 'api/v1/accounts/account-request';
        integrationSetting.HTTP_Headers__c = 'Content-Type=>application/json';
        integrationSetting.HTTP_Method__c = 'POST';
        integrationSetting.Timeout__c = 120000;
        integrationSetting.Enable_Logging__c = true;
        
        insert integrationSetting;
        Opportunity_Validations__mdt metdat=new Opportunity_Validations__mdt();
        metdat.Field_API__c='New Account';
        metdat.Field_Value__c='abc';
        system.assert(integrationSetting.Id != null);
        
      //Creating Integration Setting
        Integration_Setting__c cipsAccessSetting= new Integration_Setting__c();
        cipsAccessSetting.name= 'CIPSCASIOpportunityAccessToken';
        cipsAccessSetting.Endpoint_Server__c ='{!Environment.Remotesite_rasinonprod}-nonprod.auth.us-east-1.amazoncognito.com-prod.auth.us-east-1.amazoncognito.com-prod.auth.us-east-1.amazoncognito.com-nonprod.auth.us-east-1.amazoncognito.com-prod.auth.us-east-1.amazoncognito.com';
        cipsAccessSetting.Endpoint_URI__c='oauth2/token';
        cipsAccessSetting.HTTP_Headers__c='Content-Type=>application/x-www-form-urlencoded';
        cipsAccessSetting.HTTP_Method__c ='POST';
        cipsAccessSetting.Timeout__c=120000;

        insert cipsAccessSetting;
        
        Integration_Setting__c integrationCASISetting= new Integration_Setting__c(); 
        integrationCASISetting.name= 'CIPSCASIOpportunityConnectCPQ';
        integrationCASISetting.API_Key__c= 'x-api-key';
        integrationCASISetting.Endpoint_Server__c ='https://dev.rasi.refinitiv.com';
        integrationCASISetting.Endpoint_URI__c='oauth/v1/opportunities/opportunity/';
        integrationCASISetting.HTTP_Headers__c='Content-Type=>application/json';
        integrationCASISetting.HTTP_Method__c ='POST'; 
        integrationCASISetting.Timeout__c=120000;      
        integrationCASISetting.Enable_Logging__c=true;
        insert integrationCASISetting;
        
        
        /* Integration_Setting__c cipsSetting= new Integration_Setting__c();
cipsSetting.name= 'CIPSRASIOpportunityConnect';
cipsSetting.Endpoint_Server__c ='{!Environment.Remotesite_rasinonprod}-nonprod.auth.us-east-1.amazoncognito.com-prod.auth.us-east-1.amazoncognito.com-prod.auth.us-east-1.amazoncognito.com-nonprod.auth.us-east-1.amazoncognito.com-prod.auth.us-east-1.amazoncognito.com.refinitiv.com';
cipsSetting.Endpoint_URI__c='/api/v2/Opportunity/OpportunityDetails';
cipsSetting.HTTP_Headers__c='Type=>application/json;authorization=>Basic;x-api-key=>x9GQfqGTE295yNLTfKw6M6KVT076sAHbdOhsncge';
cipsSetting.HTTP_Method__c ='POST';
cipsSetting.Timeout__c=120000;

insert cipsSetting;

system.assert(cipsSetting.Id != null);
*/
        
        insert new TRUST_Constants__c(SetupOwnerId=UserInfo.getOrganizationId(), Opty_Revenue_type_name__c='Usage Revenue,Once-Off,Outright Revenue');
        List<Opportunity_Validations__mdt> objList= new List<Opportunity_Validations__mdt>();
        objList= [Select Field_API__c,Field_Value__c, DeveloperName from Opportunity_Validations__mdt];
        
        List<User> testUserList = new List<User>();
        List<Opportunity> testOpportunityList = new List<Opportunity>();
        List<Account> testAccountList = new List<Account>();
        List<Direct_Pool__c>dpList = new List<Direct_Pool__c>();
        List<PriceBook2> priceBookList = new List<PriceBook2>();
        List<Product2> productList = new List<Product2>(); 
        List<PricebookEntry> PricebookEntryList = new List<PricebookEntry>();
        List<opportunityLineItem> oppLineItemList = new List<opportunityLineItem>();
        
        //reffering 
        MasterCustomSetting_Test.customSettings();
        //creating users
        
        
        TriggerStatus__c TriStatus= new TriggerStatus__c(); // inserting customsetting
        TriStatus.name='Primary';
        TriStatus.Status__c='OFF';
        TriStatus.UsersExclude__c='00530000000xQ4q';
        insert TriStatus;
        
        //Integration User                         
        id ProfId =  optimisationTestUtility.getProfileId().get('Integration');                      
        User tfUser = optimisationTestUtility.getUserDetails(ProfId,'tfintegration@thomsonreuters.com','tfintegration@thomsonreuters.com','Integration');
        tfUser.Company_Allocation__c='TCS';
        testUserList.add(tfUser);
        
        Id ProfileIdAPI = optimisationTestUtility.getProfileId().get('API');
        User GenericUser = optimisationTestUtility.getUserDetails(ProfileIdAPI,'api@thomsonreuters.com','api@thomsonreuters.com','API');
        GenericUser.Company_Allocation__c='TCS';
        testUserList.add(GenericUser);
        
        //insert all users
        insert testUserList;
        
        //Creating Campaign record
        List<Campaign> campaginList = new List<Campaign>();
        
        Campaign campaignRecord =optimisationTestUtility.getCampaignDetails('TestCampaign','In Progress');
        campaignRecord.Unica_ID__c ='00011090871';
        campaginList.add(campaignRecord);
        
        Campaign cmpgn1 = optimisationTestUtility.getCampaignDetails('TEST1',null);
        cmpgn1.tocSiebelId__c='TEST';
        cmpgn1.Unica_ID__c='45374';
        
        campaginList.add(cmpgn1);
        
        //insert all campagins
        insert campaginList;
        
        List<Static_Values__c> sList =new List<Static_Values__c>();
        Static_Values__c s1 = new Static_Values__c();
        s1.Name='Account.Prospect';
        s1.Value__c='012300000000erOAAQ';
        Static_Values__c s2 = new Static_Values__c();
        s2.Name='Account.Customer';
        s2.Value__c='012400000004xe3AAA';
        sList.add(s1);
        sList.add(s2);
        
        Static_Values__c oppReason5= new Static_Values__c();
        oppReason5.Name='ST4OR5_Prob_WithCommit';
        oppReason5.Value__c='90';
        sList.add(oppReason5);
        
        Static_Values__c oppReason6= new Static_Values__c();
        oppReason6.Name='ST5_Prob_WithoutCommit';
        oppReason6.Value__c='80';
        sList.add(oppReason6);
        
        Static_Values__c oppReason7= new Static_Values__c();
        oppReason7.Name='ST4_Prob_WithoutCommit';
        oppReason7.Value__c='50';
        sList.add(oppReason7);
        upsert sList;
        
        Test.startTest();
        //Creating Accounts
        
        Account oppAccount = optimisationTestUtility.getAccountdetails('Account123@',TRUE,'prospect');    
        oppAccount.tfCrmCountry__c='United';
        oppAccount.CurrencyIsoCode = 'AMD';
        oppAccount.Segment__c='Academia'; 
        oppAccount.AccountNumber = 'A-123458';
        oppAccount.Coverage_Model__c = 'Growth';
        oppAccount.Partner__c=true;
        oppAccount.Partner_Role__c='Cosell';
        oppAccount.Addressable__c=True;
        testAccountList.add(oppAccount);
        
        Account oppAcc = optimisationTestUtility.getAccountWithParentId('Acc23@',FALSE,'prospect',oppAccount.id);  
        oppAcc.tfCrmCountry__c='United';
        oppAcc.Partner__c = True;
        oppAcc.Partner_Role__c='Cosell';
        oppAcc.CurrencyIsoCode = 'USD';
        oppAcc.AccountNumber = 'A-123457';
        oppAcc.Coverage_Model__c = 'Growth';
        oppAcc.Segment__c='Academia';
        oppAcc.Ultimate_Parent_Account__c=oppAccount.Id;
        testAccountList.add(oppAcc);
        
        Account oppParentAccount = optimisationTestUtility.getAccountdetails('parentAccount@12',TRUE,'prospect');
        oppParentAccount.tfCrmCountry__c='United';
        oppParentAccount.Segment__c='Academia';
        oppParentAccount.AccountNumber = 'A-123456';
        testAccountList.add(oppParentAccount);
        //insert all accounts
        insert testAccountList; 
        
        
        //Creating Pricebook entries
        PriceBook2 PricebookGenesis =optimisationTestUtility.getPricebook('Genesis Pricebook',false);
        priceBookList.add(PricebookGenesis);
        PriceBook2 fxallPricebookRec =optimisationTestUtility.getPricebook('FXall Pricebook',true);
        priceBookList.add(fxallPricebookRec);
        PriceBook2 grcPricebook =optimisationTestUtility.getPricebook('GRC Pricebook',true);
        priceBookList.add(grcPricebook);
        //insert all pricebook
        insert priceBookList;
        system.debug('picebook list'+priceBookList);
        
        //creating products
        Product2 OppProduct = optimisationTestUtility.getProductDetails('Test Product','Webcast Option');
        OppProduct.Description='Test';
        OppProduct.productCode = 'test';
        productList.add(OppProduct);
        //inserting product list
        insert productList;
        
        //Insert Custom Account Team members
        Custom_Account_Team__c customTM =  optimisationTestUtility.getCustomAccountTeamDetails(oppAccount.Id,'FI Client Specialist','Lead Client Specialist');      
        insert customTM ;
        Partner_Accounts__c PAC=new Partner_Accounts__c();
        PAC.Name='testABC';
        PAC.AccountID__c=oppAccount.Id;
        insert PAC;
        opportunity opptest = optimisationTestUtility.getOpportunityDetails('testingOpp', oppAccount.Id,'account',PricebookGenesis.Id);
        opptest.Legal_Review_Status__c='Submitted to Legal';
        opptest.StageName=Label.Opportunity_Stage_5;
        opptest.CurrencyIsoCode='USD';
        opptest.Onboarding__c='First Trade';
        opptest.Suppress_Order_Form__c = TRUE;
        opptest.tfcrmWinLossReason__c ='Reduction in Client Staff';
        opptest.GRC_Opportunity__c = FALSE;
        opptest.tfcrmWinLossCommentary__c='lost';
        opptest.CampaignId = campaignRecord.Id;
        opptest.Trial_Opportunity__c = TRUE;
        opptest.tfcrmMkt__c='Corporate United States';
        opptest.tocPurchaseOrderNumber__c='12345';
        opptest.Is_PO_Required__c='No PO# Required';        
        // opptest.Partner_Account__c = oppacc.Id;
        opptest.Partner_Role__c = 'test23';
        opptest.Unica_ID__c = '789652';
        oppTest.Competitors__c='Test';
        oppTest.Commit_to_Forecast__c=true;
        oppTest.tocGSCSMonthlyRecurring__c = 900;
        oppTest.tocGSCSOneTimeRevenue__c = 900;
        
        
        Opportunity OppLegalTest =optimisationTestUtility.getOpportunityDetails('oppegal', oppAccount.Id ,'test',Test.getStandardPricebookId()); 
        OppLegalTest.StageName=Label.Opportunity_Stage_4;
        OppLegalTest.CurrencyIsoCode='USD';
        OppLegalTest.GRC_Opportunity__c = FALSE;
        OppLegalTest.Commit_to_Forecast__c=false;
        
        opportunity trailOpportunity = optimisationTestUtility.getOpportunityDetails('genera@l234', oppAccount.Id,'account',PricebookGenesis.Id);
        trailOpportunity.Legal_Review_Status__c='Submitted to Legal';
        trailOpportunity.StageName='1.analysis';
        trailOpportunity.Partner_Name__c=PAC.Id;
        trailOpportunity.CurrencyIsoCode='USD';
        trailOpportunity.Onboarding__c='First Trade';
        trailOpportunity.Suppress_Order_Form__c = TRUE;
        trailOpportunity.tfcrmWinLossReason__c ='Reduction in Client Staff';
        trailOpportunity.GRC_Opportunity__c = false;
        trailOpportunity.CampaignId = campaignRecord.Id;
        trailOpportunity.Trial_Opportunity__c = TRUE;
        trailOpportunity.Associated_Id__c = opptest.Id;
        trailOpportunity.Multi_Campaigns__c='test';
        trailOpportunity.Lead_Source_Most_Recent__c = 'CLIENT SPECIALIST';
        trailOpportunity.Secondary_Lead_Source_Most_Recent__c='test trail';
        
        
        opportunity OppGensisOld =  optimisationTestUtility.getOpportunityDetails('oppGeneis', oppAccount.Id,'account',PricebookGenesis.Id);
        OppGensisOld.Legal_Review_Status__c='Submitted to Legal';
        OppGensisOld.StageName=Label.Opportunity_Stage_8;
        OppGensisOld.CurrencyIsoCode='USD';
        OppGensisOld.Onboarding__c='First Trade';
        OppGensisOld.Suppress_Order_Form__c = FALSE;
        OppGensisOld.tfcrmWinLossReason__c ='Reduction in Client Staff';
        OppGensisOld.Competitors__c='Test';
        OppGensisOld.tfcrmWinLossCommentary__c = 'Test Class';
        OppGensisOld.Unica_ID__c='12345';
        
        Opportunity oppTesting = optimisationTestUtility.getOpportunityDetails('oppTesting', oppAccount.Id,'account',null);
        oppTesting.Legal_Review_Status__c='Submitted to Legal';
        oppTesting.StageName='1.analysis';
        oppTesting.CurrencyIsoCode='USD';
        oppTesting.Onboarding__c='First';
        oppTesting.Suppress_Order_Form__c = TRUE;
        oppTesting.tfcrmWinLossReason__c ='Reduction in Client Staff';
        oppTesting.Trial_Opportunity__c = TRUE;
        oppTesting.GRC_Opportunity__c = TRUE ; 
        oppTesting.Partner_Role__c='test';
        oppTesting.Partner_Account__c=oppAccount.Id;
        
        opportunity oppQuoteExpired =  optimisationTestUtility.getOpportunityDetails('oppQuoteExpired', oppAccount.Id,'account',PricebookGenesis.Id);
        oppQuoteExpired.Legal_Review_Status__c='Submitted to Legal';
        //oppQuoteExpired.name= 'Conv20';
        //oppQuoteExpired.Associated_Opportunity__c = oppTesting.Id;
        oppQuoteExpired.StageName='1.analysis';
        oppQuoteExpired.CurrencyIsoCode='USD';
        oppQuoteExpired.Onboarding__c='First Trade';
        oppQuoteExpired.Suppress_Order_Form__c = TRUE;
        oppQuoteExpired.tfcrmWinLossReason__c ='Reduction in Client Staff';
        
        Opportunity genesisOpp =  optimisationTestUtility.getOpportunityDetails('genesisOpp', oppAccount.Id,'account',PricebookGenesis.Id);
        genesisOpp.Legal_Review_Status__c='Submitted to Legal';
        genesisOpp.StageName=Label.Opportunity_Stage_8;
        genesisOpp.CurrencyIsoCode='USD';
        genesisOpp.Onboarding__c='First Trade';
        genesisOpp.Suppress_Order_Form__c = FALSE;
        genesisOpp.tfcrmWinLossReason__c ='Reduction in Client Staff';
        genesisOpp.Competitors__c='Test';
        genesisOpp.Associated_Id__c = oppTesting.Id;
        genesisOpp.tfcrmWinLossCommentary__c = 'Test Class';
        genesisOpp.tfcrmMkt__c = 'United States';
        genesisOpp.Unica_ID__c='12345000';
        
        Opportunity parentOpportunity =  optimisationTestUtility.getOpportunityDetails('parentOpportunity', oppAccount.Id,'account',PricebookGenesis.Id);
        parentOpportunity.Legal_Review_Status__c='Submitted to Legal';
        parentOpportunity.StageName=Label.Opportunity_Stage_8;
        parentOpportunity.CurrencyIsoCode='USD';
        parentOpportunity.Onboarding__c='First Trade';
        parentOpportunity.Suppress_Order_Form__c = FALSE;
        parentOpportunity.tfcrmWinLossReason__c ='Reduction in Client Staff';
        parentOpportunity.Competitors__c='Test';
        parentOpportunity.tfcrmWinLossCommentary__c = 'Test Class';
        parentOpportunity.Unica_ID__c='123577';
        
        // Adding code for BULK TOOL Oppty
        opportunity bulkOpp= optimisationTestUtility.getOpportunityDetails('Bulk Opp', oppAccount.Id,'account',PricebookGenesis.Id);
        bulkOpp.Legal_Review_Status__c='Submitted to Legal';
        bulkOpp.StageName=Label.Opportunity_Stage_5;
        bulkOpp.CurrencyIsoCode='USD';
        bulkOpp.tfcrmWinLossReason__c ='Reduction in Client Staff';
        bulkOpp.tfcrmWinLossCommentary__c='lost';
        bulkOpp.CampaignId = campaignRecord.Id;
        bulkOpp.tfcrmMkt__c='Reuters';
        bulkOpp.Competitors__c='Test';
        bulkOpp.BulkTool_CheckBox__c= true;
        bulkOpp.Access_Statement_Order_Number__c= 'GBT-0001';
        // ENDED bulk tool Oppty creation
        
        testOpportunityList.add(opptest);
        testOpportunityList.add(OppLegalTest);
        testOpportunityList.add(trailOpportunity);
        testOpportunityList.add(oppQuoteExpired);
        testOpportunityList.add(OppGensisOld);
        testOpportunityList.add(oppTesting);
        testOpportunityList.add(genesisOpp);
        testOpportunityList.add(parentOpportunity);
        testOpportunityList.add(bulkOpp);
        
        trConstants__c trc = new trConstants__c();
        trc.Name='ModelId';
        Id campaignInfluenceModelId = [SELECT Id FROM CampaignInfluenceModel  WHERE DeveloperName = 'Custom_Attribution_Model'].Id;
        trc.Value__c= campaignInfluenceModelId ;
        insert trc;
        //insert all generic opportunities
        //test code
        opportunity opptest1 = optimisationTestUtility.getOpportunityDetails('exp', oppAccount.Id,'account',PricebookGenesis.id);
        opptest1.StageName='6.dhhjdjk';
        opptest1.tfcrmWinLossReason__c = 'rrr';
        opptest1.tfcrmWinLossCommentary__c = 'yyu';
        opptest1.Competitors__c = 'tty';
        opptest1.CampaignId = campaginList[0].id;
        //insert opptest1;
        testOpportunityList.add(opptest1);
        insert testOpportunityList;        
      //  List<sobject> ltobj= new list<sobject>();      
        Contact testContact = new Contact(FirstName = 'CQS Test', LastName = 'Contact', Salutation = 'M', tocContactStatus__c = 'Prospect', Phone = '+44 207 1234567',email='abc@gmail.com' );       
        testContact.AccountId = oppAccount.Id;
        TriggerUtility.objectNames.add('Contact');
        insert testContact;
   //   ltobj.add(testContact);
        Contact_Proposition__c cp= new Contact_Proposition__c(Name='test',Related_Contact__c=testContact.id,Contact_Qualification_Status__c='Open');
      // TriggerUtility.objectNames.add('Contact_Proposition__c');
       insert cp;

        Contact_Proposition_Influence__c cpi = new Contact_Proposition_Influence__c(Name='tt',Account__c=oppAccount.Id,ttr_Opp__c=opptest.id,Contact_Proposition__c=cp.id);
        TriggerUtility.objectNames.add('Opportunity');
        insert cpi;

        //Create ContentVersion Record
        string before = 'Testing base 64 encode';            
        Blob beforeblob = Blob.valueOf(before);
        ContentVersion cv = new ContentVersion();
        cv.title = 'test content trigger';      
        cv.PathOnClient = 'test';           
        cv.VersionData = beforeblob;       
        insert cv;         
        
        ContentVersion testContent = [SELECT id, ContentDocumentId FROM ContentVersion where Id =: cv.Id];
        
        List<Contentdocumentlink> cdlList = new List<Contentdocumentlink>();
        
        Contentdocumentlink cdl = new Contentdocumentlink();
        cdl.ContentDocumentId=testContent.contentdocumentid;
        cdl.LinkedEntityId= oppQuoteExpired.id;
        insert cdl;
        
        //--test code
        SAP_Account_Plan__c accPlan = optimisationTestUtility.getSAPAccountPlan('plan','USD', oppAcc.Id);
        insert accPlan;
        
        SAP_Strategy__c strategyRecord = optimisationTestUtility.getSAPStrategy('stat', oppAcc.Id,accPlan.Id,'Strategy Valid','defend',system.today());
        insert strategyRecord;
        
        SAP_Strategic_Opportunity__c sapStrategicRecord = optimisationTestUtility.getSapStrategicOpp(strategyRecord.id, OppLegalTest.id);
        insert sapStrategicRecord;
        
        //Product creation
        Product2 prod1 =optimisationTestUtility.getProductDetails('Eikon','Base');
        insert prod1;
        
        List<PriceBookEntry> lstPBE = new List<PriceBookEntry>();
        //Create pricebook entry
        PriceBookEntry pbe1 = optimisationTestUtility.getPricebookEntryDetails(prod1.id, Test.getStandardPricebookId());
        lstPBE.add(pbe1);
        
        PriceBookEntry pbe2 =optimisationTestUtility.getPricebookEntryDetails(prod1.id, grcPricebook.id);
        lstPBE.add(pbe2);
        
        PriceBookEntry pbe3 = optimisationTestUtility.getPricebookEntryDetails(prod1.id,PricebookGenesis.id);
        lstPBE.add(pbe3);
        
        insert lstPBE;
        
        
        
        //Campaign_Opportunity_Link__c
        List<CampaignInfluence> camOppLinkList = new List<CampaignInfluence>();
        
        CampaignInfluence CMNew =optimisationTestUtility.getCampaignOppLink(cmpgn1.id,parentOpportunity.id);
        camOppLinkList.add(CMNew);
        
        insert camOppLinkList;
        
        //creating opprtunity line item   
        OpportunityLineItem oppLineItem =optimisationTestUtility.getOpportunityLineItemDetails(oppTesting.Id,pbe2.Id,-2,10);  
        oppLineItem.QLI_Bill_Start_Date__c= system.today();
        oppLineItem.QLI_Recurring_Total__c =10;
        oppLineItem.tocOneTimeUnitPrice__c = 10;
        //oppLineItem.TotalPrice = 20;
        oppLineItem.GSSO__c='test';
        oppLineItemList.add(oppLineItem);
        
        //creating opprtunity line item 
        OpportunityLineItem oppGenesisLineItem =optimisationTestUtility.getOpportunityLineItemDetails(genesisOpp.Id,pbe3.Id,2,10);  
        oppGenesisLineItem.QLI_Bill_Start_Date__c= system.today();
        oppGenesisLineItem.QLI_Recurring_Total__c =10;
        oppGenesisLineItem.tocOneTimeUnitPrice__c = 10;
        oppGenesisLineItem.GSSO__c='test';
        oppLineItemList.add(oppGenesisLineItem);
        
        //creating opprtunity line item 
        OpportunityLineItem opp1 =optimisationTestUtility.getOpportunityLineItemDetails(opptest1.Id,pbe3.Id,2,10);  
        opp1.QLI_Bill_Start_Date__c= system.today();
        opp1.QLI_Recurring_Total__c =1;
        opp1.tocOneTimeUnitPrice__c = 10;
        opp1.GSSO__c='test';
        oppLineItemList.add(opp1);
        TriggerUtility.objectNames.add('OpportunityLineItem');
        insert oppLineItemList;
        
        //Start----Quote creation logic
        
        
        List<Quote> quoteList = new List<Quote>();
        
        ID grcQuoteRecordTypeId = optimisationTestUtility.getquoterecordtype().get('GRC Quote');
        Static_Values__c statval=new Static_Values__c();
        statval.Name='CTI_Scheduler_IsRunning';
        statval.Value__c='false';
        insert statval;
        
        Quote quoteRecord1 = optimisationTestUtility.getQuoteDetails('GRCQuoteTest',oppTesting.Id ,grcQuoteRecordTypeId,grcPricebook.Id,'In Progress');
        quoteRecord1.Credit_Reason_Code__c ='Annual Price increase reversal';
        quoteRecord1.Billing_Contact_Salutation__c = 'mr';
        quoteList.add(quoteRecord1);
        
        Quote quoteRecord2 = optimisationTestUtility.getQuoteDetails('GRCQuoteTest2',oppTesting.Id ,grcQuoteRecordTypeId,grcPricebook.Id,'In Progress');
        quoteRecord2.Credit_Reason_Code__c ='Annual Price increase reversal';
        quoteRecord2.Billing_Contact_Salutation__c = 'mr';
        quoteList.add(quoteRecord2);
        
        TriggerUtility.objectNames.add('Quote');
        insert quoteList;
        
        QuoteLineItem qLI  = optimisationTestUtility.getQuoteLineItemDetails(quoteRecord2.id , pbe2.Id, -2222 , 1315);
        qLI.list_price__c = 1200;
        qLI.OLI_Status__c = 'In Progress';
        qLI.Cancelled_LineItem__c = false;
        qLI.Retract_Line_Item__c = false; 
        qLI.SAP_LineItem_Number__c = '7000225-1';  
        qLI.Cancelled_LineItem__c = True;
        qLI.Retract_Line_Item__c = False;
        
        //insert qLI;
        //End----Quote creation logic
        oppTest.Commit_to_Forecast__c=false;
        //oppTest.CIPS_PSFlag__c= true;
        //oppTest.CIPS_Demand_Number__c= 'CIPSDEMAND';
        oppTest.stagename = Label.Opportunity_Stage_8;

        //update opptest;

        Test.stopTest();
    } 

    static testmethod void genericBeforeDelete(){ 
        
        //Added for fixing Account Master error- start
        Integration_Setting__c integrationSetting = new Integration_Setting__c();
        integrationSetting.name = 'AccountConnect';
        integrationSetting.API_Key__c = 'x-api-key';
        integrationSetting.Endpoint_Server__c = 'https://dev.rasi.refinitiv.com';
        integrationSetting.Endpoint_URI__c = 'api/v1/accounts/account-request';
        integrationSetting.HTTP_Headers__c = 'Content-Type=>application/json';
        integrationSetting.HTTP_Method__c = 'POST';
        integrationSetting.Timeout__c = 120000;
        integrationSetting.Enable_Logging__c = true;
        
        insert integrationSetting;
        
        system.assert(integrationSetting.Id != null);
        List<Static_Values__c> sList =new List<Static_Values__c>();
        Static_Values__c s1 = new Static_Values__c();
        s1.Name='Account.Prospect';
        s1.Value__c='012300000000erOAAQ';
        Static_Values__c s2 = new Static_Values__c();
        s2.Name='Account.Customer';
        s2.Value__c='012400000004xe3AAA';
        
        Static_Values__c oppReason5= new Static_Values__c();
        oppReason5.Name='ST4OR5_Prob_WithCommit';
        oppReason5.Value__c='90';
        sList.add(oppReason5);
        
        Static_Values__c oppReason6= new Static_Values__c();
        oppReason6.Name='ST5_Prob_WithoutCommit';
        oppReason6.Value__c='80';
        sList.add(oppReason6);
        
        Static_Values__c oppReason7= new Static_Values__c();
        oppReason7.Name='ST4_Prob_WithoutCommit';
        oppReason7.Value__c='50';
        sList.add(oppReason7);
        
        sList.add(s1);
        sList.add(s2);
        upsert sList;
        Test.startTest();
        
        List<Opportunity> oppDelete= new List<Opportunity>();
        Opportunity OpportunityDelete = new Opportunity();
        //start test
        
        
        //Tf Integration user
        User tfIntegrationUser = [SELECT id,profileid,username,profile.name,profile.Id FROM user WHERE username ='tfintegration@thomsonreuters.com'];
        User GenralUser = [SELECT id,profileid,username,profile.name,profile.Id FROM user WHERE username ='api@thomsonreuters.com'];
        
        //reffering static_values__c custom settings for creating opportunity
        //MasterCustomSetting_Test.customSettings();
        
        //run as Integration profile
        system.runAs(tfIntegrationUser){  
            
            OpportunityDelete = optimisationTestUtility.getOpportunityDetails('oppToDelete', null , 'account',null);
            OpportunityDelete.StageName='1.analysis'; 
            OpportunityDelete.CurrencyIsoCode='USD';
            OpportunityDelete.Suppress_Order_Form__c = TRUE;
            OpportunityDelete.Unica_ID__c='1234502';
            OpportunityDelete.tfcrmWinLossReason__c ='Reduction in Client Staff';
            OpportunityDelete.CreatedById =Label.UnicaDeleteId;
            opportunityDelete.LeadSource = 'test lead';
            opportunityDelete.Lead_Source_Most_Recent__c = 'most recent';
            oppDelete.add(OpportunityDelete);
            
            //insert all opportunities
            //insert oppDelete;
            
        }
        
        system.runAs(GenralUser){
            try{
                //delete the Inserted opportunities
                //TriggerUtility.objectNames.add('OpportunityLineItem');
                delete oppDelete; 
            }catch(Exception e){
                System.debug(e.getMessage());
            }
        }
        //Stop Test
        Test.stopTest();          
    }//end of genericBeforeDelete method
    
    static testmethod void genericBeforeUpdate(){
        //Added for fixing Account Master error- start
        Integration_Setting__c integrationSetting = new Integration_Setting__c();
        integrationSetting.name = 'AccountConnect';
        integrationSetting.API_Key__c = 'x-api-key';
        integrationSetting.Endpoint_Server__c = 'https://dev.rasi.refinitiv.com';
        integrationSetting.Endpoint_URI__c = 'api/v1/accounts/account-request';
        integrationSetting.HTTP_Headers__c = 'Content-Type=>application/json';
        integrationSetting.HTTP_Method__c = 'POST';
        integrationSetting.Timeout__c = 120000;
        integrationSetting.Enable_Logging__c = true;
        
        insert integrationSetting;
        
        system.assert(integrationSetting.Id != null);
        //start test
        List<Static_Values__c> sList =new List<Static_Values__c>();
        //GTT-872 CODE STARTS
        Static_Values__c oppReason1 = new Static_Values__c();
        oppReason1.Name='Oppty_Stage_7_Env_Status';
        oppReason1.Value__c=' QUote Completed';
        Static_Values__c oppReason2= new Static_Values__c();
        oppReason2.Name='Oppty_Stage_8_Env_Status';
        oppReason2.Value__c='Quote Expired';
        Static_Values__c oppReason3= new Static_Values__c();
        oppReason3.Name='Oppty_Voided_Stage';
        oppReason3.Value__c='6. Contract Signed';
        Static_Values__c oppReason4= new Static_Values__c();
        oppReason4.Name='DocuSign_Query_Size';
        oppReason4.Value__c='100';
        
        sList.add(oppReason1);
        sList.add(oppReason2);
        sList.add(oppReason3);
        sList.add(oppReason4);
        //GTT-872 CODE ENDS
        insert sList;       

        Test.startTest();
        
            List<Opportunity> oppListUpdate = new List<Opportunity>();
            Opportunity oppToUpdate = [Select id,name From Opportunity Where name ='genera@l234'];
            Opportunity oppToUpdate1 = [Select id,name From Opportunity Where name ='testingOpp'];
            Opportunity OppLegal = [Select id,name From Opportunity Where name ='oppegal'];
            Account oppAcc = [SELECT id,name FROM Account WHERE Name = 'Acc23@'];
            
       
            //updating oppToUpdate fields
            oppToUpdate.AccountId = oppAcc.Id;
            oppToUpdate.trActiveQuoteInd__c = FALSE;
            oppToUpdate.StageName = '3. Trial/Demo/Solution Recommended';
            //oppToUpdate.genesis_flag__c = 'False';
            oppToUpdate.GRC_Opportunity__c = false;
            oppToUpdate.Associated_Opportunity__c = OppLegal.Id;
            //oppToUpdate.Suppress_Approvals__c=true;
            // oppToUpdate.Suppress_Approval_Justification__c='test';
            oppListUpdate.add(oppToUpdate);
            
            oppToUpdate1.StageName=Label.Opportunity_Stage_6;
            oppListUpdate.add(oppToUpdate1);
            
            OppLegal.AccountId = oppAcc.id;
            OppLegal.StageName = '2.str';
            oppListUpdate.add(OppLegal);
         
            Opportunity oppQuoteExpired = [Select id,name From Opportunity Where name ='oppQuoteExpired'];
            //Opportunity oppExpectedSS7 = [Select id,name From Opportunity Where name ='expectedSS7'];
            //GTT-872 CODE STARTS
            dsfs__DocuSign_Status__c docStatus1= new dsfs__DocuSign_Status__c ();
            docStatus1.dsfs__Envelope_Status__c='Sent';
            docStatus1.dsfs__Opportunity__c=oppQuoteExpired.Id;
            insert docStatus1;
            //GTT-872 CODE ENDS
            
            oppQuoteExpired.GRC_Opportunity__c  = true;
            oppQuoteExpired.StageName = Label.Opportunity_Stage_8;
            oppQuoteExpired.Competitors__c = 'Test';
            oppQuoteExpired.tfcrmWinLossReason__c ='Not Pursued';
            oppQuoteExpired.tfcrmWinLossCommentary__c = 'Test Classes';
            oppListUpdate.add(oppQuoteExpired);
            
            Opportunity GenesisOpptyOld = [Select id,name From Opportunity Where name ='oppGeneis'];                   
            
            GenesisOpptyOld.stagename = Label.Opportunity_Stage_3;
            GenesisOpptyOld.Suppress_Order_Form__c  = true;
            //update opportunity
            oppListUpdate.add(GenesisOpptyOld );
            
            Static_Values__c statval=new Static_Values__c();
            statval.Name='CTI_Scheduler_IsRunning';
            statval.Value__c='false';
            insert statval;
            
            
            List<OpportunityContactRole> lstOptyContactRole = new List<OpportunityContactRole>();
            
            for(Opportunity opp : oppListUpdate)
            {
                OpportunityContactRole oppContactRol = new OpportunityContactRole();
                oppContactRol.isPrimary = True;
                oppContactRol.opportunityId = opp.id;  
                oppContactRol.Role = 'Decision Maker';
                lstOptyContactRole.add(oppContactRol);
            }
            
            update oppListUpdate;
            
            oppToUpdate.tfcrmWinLossCommentary__c = 'test Class';
            oppToUpdate.StageName = Label.Opportunity_Stage_6;
            oppToUpdate.Competitors__c = 'test';
            update oppToUpdate;
            
            //GTT-872 CODE STARTS
            dsfs__DocuSign_Status__c docStatus2= new dsfs__DocuSign_Status__c ();
            docStatus2.dsfs__Envelope_Status__c='Delivered';
            docStatus2.dsfs__Opportunity__c=GenesisOpptyOld.Id;
            insert docStatus2;       
            
            GenesisOpptyOld.tfcrmWinLossCommentary__c = 'test Class';
            GenesisOpptyOld.StageName = Label.Opportunity_Stage_6;
            GenesisOpptyOld.Competitors__c = 'test';
            update GenesisOpptyOld;
            //GTT-872 CODE ENDS
        
        //stop tset
        Test.stopTest();
    } 
    
    static testmethod void genericAfterInsert(){
        //Added for fixing Account Master error- start
        Integration_Setting__c integrationSetting = new Integration_Setting__c();
        integrationSetting.name = 'AccountConnect';
        integrationSetting.API_Key__c = 'x-api-key';
        integrationSetting.Endpoint_Server__c = 'https://dev.rasi.refinitiv.com';
        integrationSetting.Endpoint_URI__c = 'api/v1/accounts/account-request';
        integrationSetting.HTTP_Headers__c = 'Content-Type=>application/json';
        integrationSetting.HTTP_Method__c = 'POST';
        integrationSetting.Timeout__c = 120000;
        integrationSetting.Enable_Logging__c = true;
        
        insert integrationSetting;
        
        system.assert(integrationSetting.Id != null);
        List<Opportunity> oppList = new List<Opportunity>();
        
        List<Static_Values__c> sList =new List<Static_Values__c>();
        Static_Values__c s1 = new Static_Values__c();
        s1.Name='Account.Prospect';
        s1.Value__c='012300000000erOAAQ';
        Static_Values__c s2 = new Static_Values__c();
        s2.Name='Account.Customer';
        s2.Value__c='012400000004xe3AAA';
        sList.add(s1);
        sList.add(s2);
        upsert sList;
        //start test

        Test.startTest();
                PriceBook2 PricebookGenesis =optimisationTestUtility.getPricebook('Genesis Pricebook',false);
        Account oppAccount12 = [SELECT id,name FROM Account WHERE Name = 'Acc23@'];
       
        // '0017j00000iHXi4AAG'
        Opportunity opprecord = optimisationTestUtility.getOpportunityDetails('testingOpp',oppAccount12.id,'account',PricebookGenesis.id);
        //opprecord.name = 'testingOpp';
        //opprecord.stagename='Prospecting';
        //opprecord.CloseDate = Date.ValueOf('2020-08-08');
        //opprecord.Shipping_Country__c='India';
        //insert opprecord;
        opportunity opp = [select id,name from opportunity where name='testingOpp' limit 1];
        Account ac = new Account();
        ac.name='Acc23@';
        ac.ShippingCountry ='India';
        insert ac;
        account acc = [select id,name from account where name ='Acc23@'  limit 1];
        opp.tocPurchaseOrderNumber__c = '89076';
        
        
        Static_Values__c statval=new Static_Values__c();
        statval.Name='CTI_Scheduler_IsRunning';
        statval.Value__c='false';
        insert statval;
        
        update opp;
        GenesisTrialConvertController.isconverted=false;
        opportunity opp1 = optimisationTestUtility.getOpportunityDetails('clonedopp', acc.Id,'account',null);
        opp1.tocClonedFrom__c = opp.Id;
        opp1.StageName = Label.Opportunity_Stage_4;
        opp1.Suppress_Approvals__c=true;
        opp1.Suppress_Approval_Justification__c='test';
        opp1.Commit_to_Forecast__c=true;
        oppList.add(opp1);
        
        opportunity opp2 = optimisationTestUtility.getOpportunityDetails('trailopp1', acc.Id,'account',null);
        opp2.tocClonedFrom__c = null;
        opp2.StageName = '2.test';
        opp2.Trial_Opportunity__c = true;
        opp2.Associated_Id__c = opp.Id;
        opp2.Redi_Flag__c = 'true';
        opp.Partner_Account__c = acc.id;
        opp.Access_Statement__c = true;
        // opp2.Suppress_Approvals__c=true;
        //opp2.Suppress_Approval_Justification__c='test';
        opplist.add(opp2);
        
        insert oppList;        
        opp1.Commit_to_Forecast__c=false; // ADDED FOR GTT-1454
        opp.Access_Statement__c = false;
        update opp1;
        
        delete opp1; // added 23062020
        //stop test
        Test.stopTest();
    }
    
    static testmethod void genericAfterUpdate(){
        //Added for fixing Account Master error- start
        Integration_Setting__c integrationSetting = new Integration_Setting__c();
        integrationSetting.name = 'AccountConnect';
        integrationSetting.API_Key__c = 'x-api-key';
        integrationSetting.Endpoint_Server__c = 'https://dev.rasi.refinitiv.com';
        integrationSetting.Endpoint_URI__c = 'api/v1/accounts/account-request';
        integrationSetting.HTTP_Headers__c = 'Content-Type=>application/json';
        integrationSetting.HTTP_Method__c = 'POST';
        integrationSetting.Timeout__c = 120000;
        integrationSetting.Enable_Logging__c = true;
        
        insert integrationSetting;
        
                //Creating Integration Setting
        Integration_Setting__c cipsAccessSetting= new Integration_Setting__c();
        cipsAccessSetting.name= 'CIPSCASIOpportunityAccessToken';
        cipsAccessSetting.Endpoint_Server__c ='{!Environment.Remotesite_rasinonprod}-nonprod.auth.us-east-1.amazoncognito.com-prod.auth.us-east-1.amazoncognito.com-prod.auth.us-east-1.amazoncognito.com-nonprod.auth.us-east-1.amazoncognito.com-prod.auth.us-east-1.amazoncognito.com';
        cipsAccessSetting.Endpoint_URI__c='oauth2/token';
        cipsAccessSetting.HTTP_Headers__c='Content-Type=>application/x-www-form-urlencoded';
        cipsAccessSetting.HTTP_Method__c ='POST';
        cipsAccessSetting.Timeout__c=120000;

        insert cipsAccessSetting;
        
        Integration_Setting__c integrationCASISetting= new Integration_Setting__c(); 
        integrationCASISetting.name= 'CIPSCASIOpportunityConnectCPQ';
        integrationCASISetting.API_Key__c= 'x-api-key';
        integrationCASISetting.Endpoint_Server__c ='https://dev.rasi.refinitiv.com';
        integrationCASISetting.Endpoint_URI__c='oauth/v1/opportunities/opportunity/';
        integrationCASISetting.HTTP_Headers__c='Content-Type=>application/json';
        integrationCASISetting.HTTP_Method__c ='POST'; 
        integrationCASISetting.Timeout__c=120000;      
        integrationCASISetting.Enable_Logging__c=true;
        insert integrationCASISetting;
        
        system.assert(integrationSetting.Id != null);
        List<Static_Values__c> sList =new List<Static_Values__c>();
        //GTT-872 CODE STARTS
        Static_Values__c oppReason1 = new Static_Values__c();
        oppReason1.Name='Oppty_Stage_7_Env_Status';
        oppReason1.Value__c=' QUote Completed';
        
        Static_Values__c oppReason2= new Static_Values__c();
        oppReason2.Name='Oppty_Stage_8_Env_Status';
        oppReason2.Value__c='Quote Expired';
        
        Static_Values__c oppReason3= new Static_Values__c();
        oppReason3.Name='Oppty_Voided_Stage';
        oppReason3.Value__c='6. Contract Signed';
        
        Static_Values__c oppReason4= new Static_Values__c();
        oppReason4.Name='DocuSign_Query_Size';
        oppReason4.Value__c='100';
        
        Static_Values__c oppReason5= new Static_Values__c();
        oppReason5.Name='ST4OR5_Prob_WithCommit';
        oppReason5.Value__c='90';
        sList.add(oppReason5);
        
        Static_Values__c oppReason6= new Static_Values__c();
        oppReason6.Name='ST5_Prob_WithoutCommit';
        oppReason6.Value__c='80';
        sList.add(oppReason6);
        
        Static_Values__c oppReason7= new Static_Values__c();
        oppReason7.Name='ST4_Prob_WithoutCommit';
        oppReason7.Value__c='50';
        sList.add(oppReason7);
        System.AssertEquals(oppReason7.Value__c,'50');
        
        
        sList.add(oppReason1);
        sList.add(oppReason2);
        sList.add(oppReason3);
        sList.add(oppReason4);
        //GTT-872 CODE ENDS
        
        TriggerUtility.objectNames.add('Account');
        insert sList;
        
        WebServiceParameters__c loginParam= new WebServiceParameters__c();
        loginParam.name= 'docusign_Credentials_CM';
        loginParam.Username__c= 'Manasa';
        loginParam.Password__c='SGFwcHlAMTIz';
        insert loginParam;
        
        Integration_Setting__c docuSignAPI= new Integration_Setting__c ();
        docuSignAPI.name= 'DocuSign_ API';
        docuSignAPI.API_Key__c= 'DOCUSIGNAPI';
        docuSignAPI.Endpoint_URI__c= 'ENDPOINTURI';
        docuSignAPI.HTTP_Method__c='PUT';
        docuSignAPI.Timeout__c= 10000;
        docuSignAPI.Certificate__c='CERTI';
        insert docuSignAPI;
        
        Test.startTest();
        
        //Opportunity List to update 
        List<Opportunity> oppListAfterUpdate = new List<Opportunity>();
        
        Opportunity oppAftUpdate = [Select id,name,SyncedQuoteId From Opportunity Where name='oppTesting'];
        Quote syncQuote = [select id from Quote where name = 'GRCQuoteTest2'];
        //GTT-872 CODE STARTS
        dsfs__DocuSign_Status__c docStatus2= new dsfs__DocuSign_Status__c ();
        docStatus2.dsfs__Envelope_Status__c='Delivered';
        docStatus2.dsfs__Opportunity__c=oppAftUpdate.Id;
        docStatus2.dsfs__DocuSign_Envelope_ID__c='DUM-234grt';
        insert docStatus2;       
        
        //GTT-872 CODE ENDS
        
        oppAftUpdate.SyncedQuoteId = syncQuote.id;
        oppAftUpdate.StageName = '8. Closed / No Order';
        oppAftUpdate.Competitors__c = 'Test';
        oppAftUpdate.tfcrmWinLossCommentary__c = 'Test Classes';
        //oppAftUpdate.Suppress_Approvals__c=true;
        //oppAftUpdate.Suppress_Approval_Justification__c='test';
        update oppAftUpdate;
        
        oppAftUpdate.StageName = '4. Generate Contract';
        oppAftUpdate.Commit_to_Forecast__c=true;
        
        update oppAftUpdate;
        
        Test.stopTest();
        oppAftUpdate.StageName = Label.Opportunity_Stage_6;
        update oppAftUpdate;
        
    }
    public static testMethod void OpportunityQuoteSyncTest(){
        //Added for fixing Account Master error- start
        Integration_Setting__c integrationSetting = new Integration_Setting__c();
        integrationSetting.name = 'AccountConnect';
        integrationSetting.API_Key__c = 'x-api-key';
        integrationSetting.Endpoint_Server__c = 'https://dev.rasi.refinitiv.com';
        integrationSetting.Endpoint_URI__c = 'api/v1/accounts/account-request';
        integrationSetting.HTTP_Headers__c = 'Content-Type=>application/json';
        integrationSetting.HTTP_Method__c = 'POST';
        integrationSetting.Timeout__c = 120000;
        integrationSetting.Enable_Logging__c = true;
        
        insert integrationSetting;
        
        system.assert(integrationSetting.Id != null);
        Map<Id,Opportunity> mapOfOppIds = new Map<Id,Opportunity>();
        Map<Id,Id> mapOfOppIds1 = new Map<Id,Id>();
        Set<Id> nonSyncedOppSet = new Set<Id>();
        Map<Id,Id> mapparntOpp = new Map<Id,Id>();
        Opportunity opp1 = [Select id,name,Partner_Name__c ,Partner_Role__c,Partner_Account__c From Opportunity Where name ='genera@l234'];
        System.assertEquals(opp1.Name,'genera@l234');
        //mapOfOppIds.put(opp1.Id,opp1);
        mapOfOppIds1.Put(opp1.Id,opp1.Partner_Name__c);
        List<Opportunity> o1=new List<Opportunity>();
        Set<Id> partnerAccountSet=new set<Id>();
        o1.add(opp1);
        Map<Id,Decimal> oppRecurringRevMap=new Map<Id,Decimal>();
        Account oppAccount = optimisationTestUtility.getAccountdetails('Account@#234',TRUE,'prospect');    
        oppAccount.tfCrmCountry__c='United';
        oppAccount.CurrencyIsoCode = 'AMD';
        oppAccount.Segment__c='Academia'; 
        oppAccount.AccountNumber = 'A-1238999458';
        oppAccount.Coverage_Model__c = 'Growth';
        oppAccount.Partner__c=true;
        insert oppAccount;
        Static_Values__c setting= new Static_Values__c();
        setting.Name = 'Trigger to AAA from AccCon Jun Roles';
        setting.Value__c = 'test';
        insert setting;
        Contact testContact = new Contact(FirstName = 'test123', LastName = 'Contact', Salutation = 'M', tocContactStatus__c = 'Prospect', Phone = '+44 207 1234567',email='abcdef@abc.com' );       
        testContact.AccountId = oppAccount.Id;
        insert testContact;
        partnerAccountSet.add(oppAccount.id);
        QuoteSyncUtil.addQuoteField('Name','Name');
        String quote_fields = QuoteSyncUtil.getQuoteFieldsString();
        Set<String> quoteFields = QuoteSyncUtil.getQuoteFields();
        Opportunity oppAftUpdate = [Select id,name,SyncedQuoteId From Opportunity Where name='oppTesting'];
        mapOfOppIds.put(oppAftUpdate.id,oppAftUpdate);
        Quote quote = [select id from Quote where name = 'GRCQuoteTest2' limit 1];
        nonSyncedOppSet.add(quote.id);
        nonSyncedOppSet.add(oppAftUpdate.SyncedQuoteId);
        mapparntOpp.put(opp1.id,oppAftUpdate.id);
        OpportunityContactRole oppContactRol = new OpportunityContactRole();
        oppContactRol.isPrimary = True;
        oppContactRol.opportunityId = opp1.id;  
        oppContactRol.Role = 'Decision Maker';
        oppContactRol.contactid = testContact.id;
        insert oppContactRol;
        OpportunityTriggerGenericHelper.OpportunityQuoteSync(nonSyncedOppSet,mapOfOppIds,quote_fields,quoteFields);
        OpportunityTriggerGenericHelper.OpportunityToAccountPartnerUpdate(o1,partnerAccountSet);
        OpportunityTriggerGenericHelper.updateOpportunityBillStartDate(oppRecurringRevMap,mapOfOppIds);
        OpportunitytriggerUtility.getPartnerRole(mapOfOppIds1);
        OpportunityTriggerGenericHelper.OppContctRoleforTrialOpty(mapparntOpp);
}    //Saransh
    @isTest
    public static  void OppQuoteLineItemsSyncTest() {
        Map<Id,Id> qotOppMap = new Map<Id,Id>();
        Test.startTest();
        Quote qotQury = [Select id, name FROM Quote Where name = 'GRCQuoteTest2'];
        Pricebook2 pricebook = [Select id, name from pricebook2 where name ='GRC Pricebook' limit 1];
        Pricebookentry pbe = [Select id,name from Pricebookentry where pricebook2id = :pricebook.id limit 1];
        QuoteLineItem qLI  = optimisationTestUtility.getQuoteLineItemDetails(qotQury.id , pbe.Id, -2 , 10);
        qLI.list_price__c = 1200;
        qLI.OLI_Status__c = 'In Progress';
        qLI.Cancelled_LineItem__c = false;
        qLI.Retract_Line_Item__c = false; 
        qLI.SAP_LineItem_Number__c = '7000225-1';  
        qLI.Cancelled_LineItem__c = True;
        qLI.Retract_Line_Item__c = False;
        //insert qLI;



        
        Opportunity oppQury = [Select id,name From Opportunity Where name='oppTesting'];
        qotOppMap.put(qotQury.id,oppQury.id);
        OpportunityTriggerGenericHelper.OppQuoteLineItemsSync(qotOppMap);
        
        system.assert(qLI != null);
        



        Test.stopTest();
    }
    //Saransh
    public static testMethod void test2() {
        TriggerUtility.objectNames.add('Account');
        //TriggerUtility.objectNames.add('Contact');
        TriggerUtility.objectNames.add('tocSubscriber__c');
        PAC_Commercial__c pac1 = PAC_Commercial__c.getOrgDefaults();
        pac1.Opty_Stage1__c = '1. Appointment Scheduled';
        pac1.Opty_Stage2__c = '2. Needs Analysis';
        pac1.Opty_Stage3__c = '3. Trial/Demo/Solution Recommended';
        pac1.Opty_Stage4__c = '4. Generate Contract';
        pac1.Opty_Stage5__c =  '5. Negotiate Contract';
        pac1.Opty_Stage6__c = '6. Contract Signed';
        pac1.Opty_Stage7__c = '7. Order Complete';
        pac1.Opty_Stage8__c = '8. Closed / No Order';
        upsert pac1;
        
        //Creating record in "Static_Values__c" Custom Setting
        Static_Values__c statval=new Static_Values__c();
        statval.Name='CTI_Scheduler_IsRunning';
        statval.Value__c='false';
        Insert statval;
        
        Static_Values__c setting= new Static_Values__c();
        setting.Name = 'Trigger to AAA from AccCon Jun Roles';
        setting.Value__c = 'test';
        insert setting;
        
        //Creating Integration Setting
        Integration_Setting__c integrationSetting= new Integration_Setting__c(); 
        integrationSetting.name= 'AccountConnect';
        integrationSetting.API_Key__c= 'x-api-key';
        integrationSetting.Endpoint_Server__c ='https://qa.rasi.refinitiv.com';
        integrationSetting.Endpoint_URI__c='api/v1/accounts/account-request';
        integrationSetting.HTTP_Headers__c='Content-Type=>application/json';
        integrationSetting.HTTP_Method__c ='POST'; 
        integrationSetting.Timeout__c=120000;      
        integrationSetting.Enable_Logging__c=true;
        insert integrationSetting;
        system.assert(integrationSetting.Id != null);
        List<GenesisNewMyAccountUserQueues__c> queueList=new List<GenesisNewMyAccountUserQueues__c>();
        
        //Creating Integration Setting
        Integration_Setting__c cipsAccessSetting= new Integration_Setting__c();
        cipsAccessSetting.name= 'CIPSCASIOpportunityAccessToken';
        cipsAccessSetting.Endpoint_Server__c ='{!Environment.Remotesite_rasinonprod}-nonprod.auth.us-east-1.amazoncognito.com-prod.auth.us-east-1.amazoncognito.com-prod.auth.us-east-1.amazoncognito.com-nonprod.auth.us-east-1.amazoncognito.com-prod.auth.us-east-1.amazoncognito.com';
        cipsAccessSetting.Endpoint_URI__c='oauth2/token';
        cipsAccessSetting.HTTP_Headers__c='Content-Type=>application/x-www-form-urlencoded';
        cipsAccessSetting.HTTP_Method__c ='POST';
        cipsAccessSetting.Timeout__c=120000;

        insert cipsAccessSetting;
        
        Integration_Setting__c integrationCASISetting= new Integration_Setting__c(); 
        integrationCASISetting.name= 'CIPSCASIOpportunityConnectCPQ';
        integrationCASISetting.API_Key__c= 'x-api-key';
        integrationCASISetting.Endpoint_Server__c ='https://dev.rasi.refinitiv.com';
        integrationCASISetting.Endpoint_URI__c='oauth/v1/opportunities/opportunity/';
        integrationCASISetting.HTTP_Headers__c='Content-Type=>application/json';
        integrationCASISetting.HTTP_Method__c ='POST'; 
        integrationCASISetting.Timeout__c=120000;      
        integrationCASISetting.Enable_Logging__c=true;
        insert integrationCASISetting;
        
        GenesisNewMyAccountUserQueues__c newval=new GenesisNewMyAccountUserQueues__c();
        newval.Name='United States';
        newval.TDOCC_Queues__c=UserInfo.getUserId();
        newval.GRC_Required__c=false;
        newval.TDO_Required__c=true;
        newval.Credit_Check_Required__c=true;
        queueList.add(newval);
        
        insert queueList;
        
        Account account1 = new Account(Name = 'Test GRC Account', Legal_Entity__c = true, ShippingCity = 'San Jose', ShippingCountry = 'United States',ShippingPostalCode = '95110',ShippingStreet = '345 Park Ave', ShippingState = 'California', 
                                       trAccountClass__c = 'Global:   DedDir', tfcmCustomerStatus__c = 'Prospect');
        
        insert account1;
        
        Contact testContact = new Contact(FirstName = 'pac test', LastName = 'test pac', Salutation = 'M', tocContactStatus__c = 'Prospect', Phone = '+44 207 1234567',email='abc@abc.com' );       
        testContact.AccountId = account1.Id;
        insert testContact;
        
        Id recordtypeId = Schema.SObjectType.opportunity.getRecordTypeInfosByName().get('Refinitiv Access').getRecordTypeId();
        
        Id standardPB = Test.getStandardPricebookId();
        PriceBook2 priceBook = new PriceBook2(Name = 'CPQ Price book', Description = 'CPQ Price book', isActive = true);
        insert priceBook;
        
        List<Product2> productList=new List<Product2>();
        Product2 p1 = new Product2(Name = 'test cpq product1',IsActive = true,Product_Level__c=2.0);
        productList.add(p1);
        insert productList;
        List<PriceBookEntry> PriceBookEntryList=new List<PriceBookEntry>();
        PriceBookEntry entry1 = new PriceBookEntry(Product2Id = p1.Id, CurrencyIsoCode = 'USD', isActive = true, UnitPrice = 10, PriceBook2Id = standardPB);
        PriceBookEntryList.add(entry1);
        PriceBookEntry entry2 = new PriceBookEntry(Product2Id = p1.Id, CurrencyIsoCode = 'USD', isActive = true, UnitPrice = 10, PriceBook2Id = priceBook.Id);
        PriceBookEntryList.add(entry2);
        insert PriceBookEntryList;
        
        Opportunity opp1 = new Opportunity(Name = 'TestMSP-1', RecordTypeId =recordtypeId,
                                           AccountId = account1.id ,Redistribution__c=true, tfcrmType__c ='Renewal', CloseDate = system.today(), StageName = '1. Appointment Scheduled',Primary_Contact__c=testcontact.id );
        
        
        Test.startTest();
        insert Opp1;
        /* List<Contact_Function__c> coList = new List<Contact_Function__c>();
        Contact_Function__c CF1 = new Contact_Function__c(Account_Id__c=account1.Id,Contact_Id__c=testContact.Id, function__c='Main Sales Contact', ELM_Status__c = 'Active' );
        coList.add(CF1);
        insert coList; 
        */
        
        SBQQ__Quote__c quote1 = new SBQQ__Quote__c();
        quote1.SBQQ__Account__c = account1.Id;
        quote1.SBQQ__Opportunity2__c = opp1.Id;
        quote1.SBQQ__Primary__c = true ;
        quote1.SBQQ__Status__c = 'In Progress';
        quote1.Effective_Date__c = system.today();
        quote1.SBQQ__StartDate__c = System.Date.today().toStartOfMonth();
        quote1.Initial_Term_months__c = 36;
        quote1.SBQQ__SubscriptionTerm__c=84;
        quote1.Second_Renewal_Term__c=24;
        quote1.Renewal_Term_s__c=24;
        quote1.Cancellation_Term__c=6;
        quote1.Deal_Type__c='Refinitiv Access';
        //quote1.Bill_Effective_Date__c=System.Date.today().toStartOfMonth();
        insert quote1;
        opp1.StageName = Label.Opportunity_Stage_8;
        opp1.SBQQ__PrimaryQuote__c = quote1.Id;
       	Update opp1;
        
        Contract con = new Contract();
        con.AccountId = account1.Id;
        con.Status = 'Draft'; 
        con.StartDate = system.today();
        con.ContractTerm = 12;
        con.SBQQ__Quote__c = quote1.id;
        //con.SBQQ__Order__c = ordList[0].id;
        insert con;
        
        case pacCase = new case();
        pacCase.AccountId = account1.Id;
        pacCase.CPQ_Quote__c= quote1.Id;
        pacCase.status = 'New';
        pacCase.Description='abcd efgh ijkl xyz';
        insert pacCase;
        
        List<Opportunity> updateOpty = [select id,StageName,SBQQ__PrimaryQuote__c,AccountId from Opportunity LIMIT 1 ];
        SBQQ__Quote__c quote12 = new SBQQ__Quote__c();
        quote12.SBQQ__Account__c = updateOpty[0].AccountId;
        quote12.SBQQ__Opportunity2__c = updateOpty[0].Id;
        quote12.SBQQ__Primary__c = true ;
        quote12.SBQQ_Order_Type__c ='New Product';
        quote12.SBQQ__Status__c = 'In Progress';
        quote12.Deal_Type__c ='PAC Commercial';
        quote12.Effective_Date__c = system.today();
        quote12.SBQQ__StartDate__c = System.Date.today().toStartOfMonth();
        quote12.Initial_Term_months__c = 36;
        quote12.SBQQ__SubscriptionTerm__c=84;
        quote12.Second_Renewal_Term__c=24;
        quote12.Renewal_Term_s__c=24;
        
        insert quote12;     
        
        opportunitytriggergenerichelper.CreateAndUpdateCase(opp1);
        //opportunitytriggergenerichelper.CreateAndUpdateCase(updateOpty[0]);
        //System.assertEquals(1,updateOpty.size(),'true');
        
        Test.stopTest();
    }
    
    //performLegalEntity test coverge
    @isTest
    public static  void performLegalEntityTest() {
        set<Id> oppAccountIdSet = new Set<Id>();
        Account Acc = new Account();
        Acc.Name ='Test Account';
        Acc.Legal_Entity__c = true;
        Acc.ShippingCountry = 'India';
        Acc.tfCrmCountry__c = 'Albania';
        Acc.CurrencyIsoCode ='EUR';
        
        insert Acc;
        
        Account Acc1 = new Account();
        Acc1.Name ='Test Account1';
        Acc1.Legal_Entity__c = false;
        Acc1.ShippingCountry = 'India';
        Acc1.ParentId = Acc.id;
        Acc1.tfCrmCountry__c = 'Albania';
        Acc1.CurrencyIsoCode ='USD';
        
        insert Acc1;
        
        List<opportunity> opportunityList = new List<opportunity>();
        Opportunity oppy1 = new Opportunity();
        oppy1.Name = 'test sedol';
        oppy1.RecordTypeId = Schema.SObjectType.opportunity.getRecordTypeInfosByName().get('Mergent').getRecordTypeId();
        oppy1.Lead_Category_of_Interest__c = 'Mergent Digital';
        oppy1.isFromLead__c = true;
        oppy1.tfcrmMkt__c ='Reuters';
        oppy1.AccountId = Acc.id;
        oppy1.StageName ='0. Lead Hand off';
        oppy1.CloseDate = Date.ValueOf('2023-06-23');
        opportunityList.add(oppy1);
        oppAccountIdSet.add(oppy1.AccountId);
        
        Opportunity oppy2 = new Opportunity();
        oppy2.Name = 'test sedol';
        oppy2.RecordTypeId = Schema.SObjectType.opportunity.getRecordTypeInfosByName().get('SEDOL').getRecordTypeId();
        oppy2.Lead_Category_of_Interest__c = 'SEDOL Licensing';
        oppy2.isFromLead__c = true;
        oppy2.tfcrmMkt__c ='Reuters';
        oppy2.AccountId = Acc1.id;
        oppy2.StageName ='0. Lead Hand off';
        oppy2.CloseDate = Date.ValueOf('2023-06-23');
        opportunityList.add(oppy2);
        insert opportunityList;
        oppAccountIdSet.add(oppy2.AccountId);
        Test.startTest();
        OpportunityTriggerGenericHelper.performLegalEntity( opportunityList, oppAccountIdSet);
        system.assert(oppy2.isFromLead__c);
        Test.stopTest();
    }

    //LeadCategoryofInterestValidation test coverage
     @isTest
    public static  void LeadCategoryofInterestValidationTest() {
        List<opportunity> opportunityList = new List<opportunity>();
        Account Acc = new Account();
        Acc.Name = 'testAcc1';
        Acc.ShippingCountry = 'India';
        insert Acc;
        Opportunity oppy1 = new Opportunity();
        oppy1.Name = 'test sedol';
        oppy1.RecordTypeId = Schema.SObjectType.opportunity.getRecordTypeInfosByName().get('Mergent').getRecordTypeId();
        oppy1.Lead_Category_of_Interest__c = 'Mergent Digital';
        oppy1.isFromLead__c = true;
        oppy1.AccountId = Acc.Id;
        opportunityList.add(oppy1);
        Opportunity oppy2 = new Opportunity();
        oppy2.Name = 'test sedol';
        oppy2.RecordTypeId = Schema.SObjectType.opportunity.getRecordTypeInfosByName().get('SEDOL').getRecordTypeId();
        oppy2.Lead_Category_of_Interest__c = 'SEDOL Licensing';
        oppy2.isFromLead__c = true;
        oppy2.AccountId = Acc.Id;
        opportunityList.add(oppy2);
        Test.startTest();
        OpportunityTriggerGenericHelper.LeadCategoryofInterestValidation(opportunityList);
        OpportunityTriggerGenericHelper.userProfileName = 'System Administrator';
        OpportunityTriggerGenericHelper.tocPreventMarketChange(opportunityList , true);
        system.assert(oppy1.isFromLead__c);
        Test.stopTest();
        
    }
    
}
