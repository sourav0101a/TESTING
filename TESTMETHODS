@isTest
public class TestOpportunityTriggerGenericHelper {

    @isTest
    static void testGenericBeforeInsert() {
        // Create test data
        Account acc = new Account(Name = 'Test Account');
        insert acc;
        
        Opportunity opp = new Opportunity(
            Name = 'Test Opportunity',
            StageName = 'Prospecting',
            CloseDate = Date.today(),
            AccountId = acc.Id
        );
        insert opp;

        // Call the method to be tested
        Test.startTest();
        OpportunityTriggerGenericHelper.genericBeforeInsert(new List<SObject>{ opp });
        Test.stopTest();

        // Verify the results
        // Example assertions
        System.assertEquals('Test Opportunity', opp.Name);
        System.assertEquals('Prospecting', opp.StageName);
        System.assertEquals(acc.Id, opp.AccountId);
        // Add more assertions as needed based on your specific requirements and the behavior of the method
    }
}



public static List<CampaignInfluence> getCampInfluenceList(List<string> opprtunityIdList){
        List<CampaignInfluence> campInfluList= new List<CampaignInfluence>();
        campInfluList= [SELECT id,CampaignId, OpportunityId, ModelId, Campaign.Unica_ID__c
                                  FROM CampaignInfluence
                                  WHERE OpportunityId IN :opprtunityIdList];  
        return campInfluList;
    }




 public static List<Opportunity> getParentOppList(Map<Id,Id> clonedOppMap){
        List<Opportunity> parentOpptyList = new List<Opportunity>();
        parentOpptyList = [SELECT id,Unica_ID__c 
                           FROM opportunity 
                           WHERE id=:clonedOppMap.keyset() AND Unica_ID__c!='']; 
        return parentOpptyList;
    }




    public static List<CampaignInfluence> getCampInfluenceList(List<String> oppIdList) {
        List<CampaignInfluence> campInfluList = new List<CampaignInfluence>();
        
        // Mock data for CampaignInfluence records
        for(Integer i = 0; i < 7; i++) { // Set 7 records
            String oppId = 'OpportunityId' + i; // Sample Opportunity Id
            CampaignInfluence campInfluence = new CampaignInfluence(
                Id = Id.valueOf('001XXXXXXXXXXXXXX' + i), // Sample Id, replace with appropriate Id
                CampaignId = 'CampaignId' + i, // Sample CampaignId
                OpportunityId = oppId, // Opportunity Id from the list
                ModelId = 'ModelId' + i, // Sample ModelId
                Campaign = new Campaign(Unica_ID__c = 'UnicaId' + i) // Sample Campaign with Unica_ID__c field set
            );
            campInfluList.add(campInfluence);
        }
        
        return campInfluList;
    }











@isTest
private class OpportunityTriggerUtilityTest {
    
    @isTest
    static void testOpptyCampaignAssociation() {
        // Create test opportunities
        List<Opportunity> parentOpptyList = new List<Opportunity>{
            new Opportunity(Name = 'Test Opportunity 1', StageName = 'Prospecting', CloseDate = Date.today()),
            new Opportunity(Name = 'Test Opportunity 2', StageName = 'Needs Analysis', CloseDate = Date.today())
        };
        insert parentOpptyList;
        
        // Fetching CampaignInfluence data using utility method
        List<CampaignInfluence> campInfluenceList = OpportunityTriggerUtility.getCampInfluenceList(new List<String>{parentOpptyList[0].Id});
        
        // Create test CampaignInfluence records using the fetched CampaignId and ModelId
        List<CampaignInfluence> campaignInfluenceList = new List<CampaignInfluence>();
        for(CampaignInfluence influence : campInfluenceList){
            if(influence.Campaign.Unica_ID__c == '123'){
                campaignInfluenceList.add(new CampaignInfluence(OpportunityId = parentOpptyList[0].Id, CampaignId = influence.CampaignId, ModelId = influence.ModelId, Campaign = influence.Campaign));
            }
        }
        
        // Adding additional CampaignInfluence record with hardcoded values for demonstration
        campaignInfluenceList.add(new CampaignInfluence(OpportunityId = parentOpptyList[1].Id, CampaignId = 'Campaign2', ModelId = 'Model2', Campaign = new Campaign(Unica_ID__c = '456')));
        
        // Create test clonedOppMap
        Map<Id, Id> clonedOppMap = new Map<Id, Id>{
            parentOpptyList[0].Id => 'clonedOpp1Id',
            parentOpptyList[1].Id => 'clonedOpp2Id'
        };
        
        // Create test genesisOppMap
        Map<Id, String> genesisOppMap = new Map<Id, String>{
            parentOpptyList[0].Id => 'genesisOpp1Value',
            parentOpptyList[1].Id => 'genesisOpp2Value'
        };
        
        // Call the method to be tested
        Test.startTest();
        OpportunityTriggerUtility.opptyCampaignAssociation(clonedOppMap, genesisOppMap);
        Test.stopTest();
        
        // Add assertions as needed
        // For example, verify the inserted CampaignInfluence records
        List<CampaignInfluence> insertedRecords = [SELECT Id, OpportunityId, CampaignId, ModelId FROM CampaignInfluence];
        System.assertEquals(3, insertedRecords.size(), 'Incorrect number of CampaignInfluence records inserted');
        // Add more assertions to validate the data as needed
    }
}
