import { api, LightningElement, track } from 'lwc';
import { getRecordNotifyChange } from 'lightning/uiRecordApi';
import newCase from '@salesforce/apex/SC_CommonLEX.newCase';
import LightningAlert from 'lightning/alert';

export default class Scnewcase extends LightningElement {
    @api resType;
    @api resMsg;
    @track showConfirmationModal = false;
    contactIdToProcess;

    @api
    newCaseContact(contactId) {
        this.contactIdToProcess = contactId;
        this.showConfirmationModal = true; // Show confirmation modal
    }

    handleConfirm() {
        this.showConfirmationModal = false; // Hide modal
        this.processCaseCreation(this.contactIdToProcess); // Proceed with case creation
    }

    handleCancel() {
        this.showConfirmationModal = false; // Hide modal without creating case
    }

    closeModal() {
        this.showConfirmationModal = false; // Hide modal
    }

    processCaseCreation(contactId) {
        getRecordNotifyChange([{ recordId: contactId }]);
        newCase({ conId: contactId })
            .then(result => {
                let conts = result;
                let indexVal = conts.indexOf(",");
                this.resType = conts.slice(0, indexVal);
                this.resMsg = conts.slice(indexVal + 1);

                if (this.resType === "alert") {
                    LightningAlert.open({
                        message: this.resMsg,
                        theme: 'error',
                        label: 'Error!',
                    }).then(() => {
                        const closeCaseModal = new CustomEvent('alerteventcase', {
                            detail: {
                                name: 'closeCaseModal'
                            }
                        });
                        this.dispatchEvent(closeCaseModal);
                    });
                } else if (this.resType === 'URL') {
                    const caseEvent = new CustomEvent('createcaseevents', {
                        detail: {
                            urlToOpen: this.resMsg,
                            name: 'OpenPage'
                        }
                    });
                    this.dispatchEvent(caseEvent);
                } else {
                    console.log('Error during case creation');
                }
            })
            .catch(error => {
                console.log('Error: ', error);
            });
    }
}
