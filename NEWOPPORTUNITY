@isTest
private class OpportunityTriggerUtilityTest {
    
    @isTest
    static void testOpptyCampaignAssociation() {
        // Create test opportunities
        List<Opportunity> parentOpptyList = new List<Opportunity>{
            new Opportunity(Name = 'Test Opportunity 1', StageName = 'Prospecting', CloseDate = Date.today()),
            new Opportunity(Name = 'Test Opportunity 2', StageName = 'Needs Analysis', CloseDate = Date.today())
        };
        insert parentOpptyList;
        
        // Fetching CampaignInfluence data using utility method
        List<CampaignInfluence> campInfluenceList = OpportunityTriggerUtility.getCampInfluenceList(new List<String>{parentOpptyList[0].Id});
        
        // Create test CampaignInfluence records using the fetched CampaignId and ModelId
        List<CampaignInfluence> campaignInfluenceList = new List<CampaignInfluence>();
        for(CampaignInfluence influence : campInfluenceList){
            if(influence.Campaign.Unica_ID__c == '123'){
                campaignInfluenceList.add(new CampaignInfluence(OpportunityId = parentOpptyList[0].Id, CampaignId = influence.CampaignId, ModelId = influence.ModelId, Campaign = influence.Campaign));
            }
        }
        
        // Adding additional CampaignInfluence record with hardcoded values for demonstration
        campaignInfluenceList.add(new CampaignInfluence(OpportunityId = parentOpptyList[1].Id, CampaignId = 'Campaign2', ModelId = 'Model2', Campaign = new Campaign(Unica_ID__c = '456')));
        
        // Create test clonedOppMap
        Map<Id, Id> clonedOppMap = new Map<Id, Id>();
        for(Opportunity opp : parentOpptyList) {
            clonedOppMap.put(opp.Id, 'clonedOppId_' + opp.Id);
        }
        
        // Create test genesisOppMap
        Map<Id, String> genesisOppMap = new Map<Id, String>();
        for(Opportunity opp : parentOpptyList) {
            genesisOppMap.put(opp.Id, 'genesisOppValue_' + opp.Id);
        }
        
        // Call the method to be tested
        Test.startTest();
        OpportunityTriggerUtility.opptyCampaignAssociation(clonedOppMap, genesisOppMap);
        Test.stopTest();
        
        // Add assertions as needed
        // For example, verify the inserted CampaignInfluence records
        List<CampaignInfluence> insertedRecords = [SELECT Id, OpportunityId, CampaignId, ModelId FROM CampaignInfluence];
        System.assertEquals(3, insertedRecords.size(), 'Incorrect number of CampaignInfluence records inserted');
        // Add more assertions to validate the data as needed
    }
}













@isTest
private class QuoteUtilityTest {
    
    @isTest
    static void testResurrectExpiredQuotes() {
        // Create test expired quotes
        List<SBQQ__Quote__c> expiredQuoteList = new List<SBQQ__Quote__c>{
            new SBQQ__Quote__c(SBQQ__Status__c = 'Expired', Quote_Valid_to__c = Date.today().addDays(-1)),
            new SBQQ__Quote__c(SBQQ__Status__c = 'Expired', Quote_Valid_to__c = Date.today().addDays(-5)),
            new SBQQ__Quote__c(SBQQ__Status__c = 'Expired', Quote_Valid_to__c = Date.today().addDays(5))
        };
        insert expiredQuoteList;
        
        // Create test list of expired quote IDs
        List<String> expiredQuoteIds = new List<String>();
        for(SBQQ__Quote__c quote : expiredQuoteList) {
            expiredQuoteIds.add(quote.Id);
        }
        
        // Call the method to be tested
        Test.startTest();
        QuoteUtility.resurrectExpiredQuotes(expiredQuoteIds);
        Test.stopTest();
        
        // Verify the updated quotes
        List<SBQQ__Quote__c> updatedQuotes = [SELECT Id, SBQQ__Status__c, Quote_Valid_to__c FROM SBQQ__Quote__c WHERE Id IN :expiredQuoteIds];
        System.assertEquals(3, updatedQuotes.size(), 'Incorrect number of quotes updated');
        for(SBQQ__Quote__c quote : updatedQuotes) {
            if (quote.Quote_Valid_to__c != null && quote.Quote_Valid_to__c > Date.today()) {
                // Verify the Quote_Valid_to__c date has been extended by 30 days for future dates
                System.assertEquals(Date.today().addDays(30), quote.Quote_Valid_to__c, 'Quote Valid To date not updated correctly');
            } else {
                // Verify the SBQQ__Status__c has been updated to 'In Progress' for expired or null dates
                System.assertEquals('In Progress', quote.SBQQ__Status__c, 'Quote status not updated correctly');
            }
        }
    }
}
