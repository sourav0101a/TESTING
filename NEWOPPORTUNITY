@isTest
private class OpportunityTriggerUtilityTest {
    
    @isTest
    static void testOpptyCampaignAssociation() {
        // Create test opportunities
        List<Opportunity> parentOpptyList = new List<Opportunity>{
            new Opportunity(Name = 'Test Opportunity 1', StageName = 'Prospecting', CloseDate = Date.today()),
            new Opportunity(Name = 'Test Opportunity 2', StageName = 'Needs Analysis', CloseDate = Date.today())
        };
        insert parentOpptyList;
        
        // Fetching CampaignInfluence data using utility method
        List<CampaignInfluence> campInfluenceList = OpportunityTriggerUtility.getCampInfluenceList(new List<String>{parentOpptyList[0].Id});
        
        // Create test CampaignInfluence records using the fetched CampaignId and ModelId
        List<CampaignInfluence> campaignInfluenceList = new List<CampaignInfluence>();
        for(CampaignInfluence influence : campInfluenceList){
            if(influence.Campaign.Unica_ID__c == '123'){
                campaignInfluenceList.add(new CampaignInfluence(OpportunityId = parentOpptyList[0].Id, CampaignId = influence.CampaignId, ModelId = influence.ModelId, Campaign = influence.Campaign));
            }
        }
        
        // Adding additional CampaignInfluence record with hardcoded values for demonstration
        campaignInfluenceList.add(new CampaignInfluence(OpportunityId = parentOpptyList[1].Id, CampaignId = 'Campaign2', ModelId = 'Model2', Campaign = new Campaign(Unica_ID__c = '456')));
        
        // Create test clonedOppMap
        Map<Id, Id> clonedOppMap = new Map<Id, Id>();
        for(Opportunity opp : parentOpptyList) {
            clonedOppMap.put(opp.Id, 'clonedOppId_' + opp.Id);
        }
        
        // Create test genesisOppMap
        Map<Id, String> genesisOppMap = new Map<Id, String>();
        for(Opportunity opp : parentOpptyList) {
            genesisOppMap.put(opp.Id, 'genesisOppValue_' + opp.Id);
        }
        
        // Call the method to be tested
        Test.startTest();
        OpportunityTriggerUtility.opptyCampaignAssociation(clonedOppMap, genesisOppMap);
        Test.stopTest();
        
        // Add assertions as needed
        // For example, verify the inserted CampaignInfluence records
        List<CampaignInfluence> insertedRecords = [SELECT Id, OpportunityId, CampaignId, ModelId FROM CampaignInfluence];
        System.assertEquals(3, insertedRecords.size(), 'Incorrect number of CampaignInfluence records inserted');
        // Add more assertions to validate the data as needed
    }
}













@isTest
private class OpportunityTriggerUtilityTest {
    
    @isTest
    static void testPopulateAssociatedOppValuestoOpportunity() {
        // Create test data
        Date closeDate = Date.today().addDays(10); // Set a close date
        
        // Create parent opportunity with required fields
        Opportunity parentOpp = new Opportunity(
            Name = 'Parent Opportunity',
            StageName = 'Closed Won',
            CloseDate = closeDate,
            Lead_Source_Most_Recent__c = 'Online',
            Secondary_Lead_Source_Most_Recent__c = 'Referral'
        );
        insert parentOpp;
        
        // Create associated opportunity with required fields
        Opportunity associatedOpp = new Opportunity(
            Name = 'Associated Opportunity',
            StageName = 'Closed Won',
            CloseDate = closeDate,
            Probability = 100,
            Multi_Campaigns__c = 'Campaign1;Campaign2',
            Lead_Source_Most_Recent__c = 'Social Media',
            Secondary_Lead_Source_Most_Recent__c = 'Advertisement'
        );
        insert associatedOpp;
        
        // Create an opportunity with associated opportunity ID
        Opportunity oppWithForAssociatedOpps = new Opportunity(
            Name = 'Opportunity with Associated Opportunity',
            StageName = 'Prospecting',
            Associated_Id__c = associatedOpp.Id
        );
        insert oppWithForAssociatedOpps;
        
        // Set up a set of parent opportunity IDs
        Set<Id> setParentOpp = new Set<Id>{ parentOpp.Id };
        
        Test.startTest();
        // Call the method to be tested
        OpportunityTriggerUtility.PopulateAssociatedOppValuestoOpportunity(new List<Opportunity>{ oppWithForAssociatedOpps }, setParentOpp);
        Test.stopTest();
        
        // Verify the updated Opportunity fields
        Opportunity updatedOpp = [SELECT Id, Multi_Campaigns__c, Lead_Source_Most_Recent__c, Secondary_Lead_Source_Most_Recent__c FROM Opportunity WHERE Id = :oppWithForAssociatedOpps.Id];
        
        // Assert that fields are populated correctly
        System.assertEquals(associatedOpp.Multi_Campaigns__c, updatedOpp.Multi_Campaigns__c, 'Multi_Campaigns__c not populated correctly');
        System.assertEquals(associatedOpp.Lead_Source_Most_Recent__c, updatedOpp.Lead_Source_Most_Recent__c, 'Lead_Source_Most_Recent__c not populated correctly');
        System.assertEquals(associatedOpp.Secondary_Lead_Source_Most_Recent__c, updatedOpp.Secondary_Lead_Source_Most_Recent__c, 'Secondary_Lead_Source_Most_Recent__c not populated correctly');
        
        // Verify that no errors are added
        System.assertEquals(0, updatedOpp
